<manpage {marsutil(n) statecontroller(n)} "State Controller Object">

<section SYNOPSIS>

<pre>
package require marsutil <version>
namespace import ::marsutil::statecontroller
</pre>

<itemlist>

<section DESCRIPTION>

An instance of the <xref statecontroller(n)> is an object that
controls the <code>-state</code> of one or more other objects.
Controlled objects are typically Tk menu items and buttons; however,
<xref statecontroller(n)> can control any object with a
<code>-state</code> option with values <b>normal</b> and
<b>disabled</b>.

The <xref statecontroller(n)> updates the state of controlled
objects when explicitly asked to do so via its <iref update>
method.  Optionally, it can do so on receipt of one or more
<xref notifier(n)> events.

The <xref statecontroller(n)> determines whether the controlled
objects should be enabled or disabled by evaluating a boolean
<code>-condition</code> for each.  The <code>-condition</code>
expression may reference the controlled object as <code>$obj</code>.
In addition, each controlled object may specify a dictionary of data
items peculiar to that object; this is called the <b>objdict</b>.
The <code>-condition</code> may reference any of the entries in the
dictionary by name.

<section COMMANDS>

<deflist commands>

<defitem statecontroller {statecontroller <i>name ?options?</i>}>

Creates a new statecontroller(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<iref statecontroller> returns the fully-qualified form of the
<i>name</i>.

The <xref statecontroller(n)> may be created with the following options:

<deflist statecontroller options>

<defopt {-condition <i>expression</i>}>

A boolean <i>expression</i> that will be evaluated for each controlled
object.  The object will be enabled if the expression is true, and
disabled if false.

The <i>expression</i> may reference the controlled object as
<code>$obj</code>, and any of the values in the object dictionary.
See <xref EXAMPLES> for details.

<defopt {-events <i>eventlist</i>}>

The <i>eventlist</i> must be a flat list of <xref notifier(n)>
subjects and events.  The <xref statecontroller(n)> will
automatically subscribe to each of the subject/event pairs, and will
update all controlled objects whenever one of the events is received.
Any event arguments are ignored.

</deflist statecontroller options>

<defitem menuitem {menuitem <i>menu itemtype label</i> ?<i>options...</i>?}>

Defines a menu item, and returns "$menu $label".  This is a
convenience function that makes it easier to control menu items; see
the <xref EXAMPLES> for more.  It's equivalent to the following code:

<pre>
    $menu add $itemtype -label $label {*}$options
</pre>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of the <iref statecontroller> object has the following
subcommands:

<deflist instance>

<defitem cget {<i>obj</i> cget <i>option</i>}>

Returns the value of the specified <i>option</i>.

<defitem configure {<i>obj</i> configure <i>option value...</i>}>

Sets the value of one or more of the object's options.

<defitem control {<i>obj</i> control <i>object</i> ?<i>key value...</i>?}>

Directs the <iref statecontroller> to control the
<code>-state</code> of the specified <i>object</i>.  The remaining
arguments collectively form the <i>object</i>'s object dictionary.

Usually, the <b>object</b> is the name of a Tk widget instance.  Menu
items, however, are a special case, as a menu item isn't a widget;
rather, it's owned by a widget.  If the controlled object is a menu
item, then <b>object</b> must be a list of two items: the instance
command of the menu on which the item appears, and the index of the
item, as defined in for the Tk <tt menu> command.  
The item's label string is a valid index.

<defitem update {<i>obj</i> update ?<i>objects</i>?}>

By default, this command explicitly updates the <code>-state</code> of
all controlled objects.  Alternatively, it can update only the
listed subset of the controlled objects.  This command is useful in
two cases:

<ul>
  <li> First, when updates need to be triggered by something other
       than a <xref notifier(n)> event, e.g., by a Tk event.

  <li> Second, when it's known that the triggering event can affect
       only a small subset of the controlled objects.
</ul>

</deflist instance>

<section EXAMPLES>

The following <iref statecontroller> is used to enable and disable
widgets based on whether the order sent by the widget is valid or not:

<pre>
    statecontroller ::cond::orderIsValid -events {
        ::order <lb>State<rb>
    } -condition {
        [::order isvalid $order]
    }
</pre>

Updates are triggered by receipt of the <b><lb>State<rb></b> event
from the <code>::order</code> processor.  The controlled widget is enabled
if the <code>$order</code> specified in its object dictionary is
valid, and disabled otherwise.

A button widget is normally associated with the
<iref statecontroller> as follows:

<pre>
    cond::orderIsValid control \
       [button $win.button                              \
           -text "Create Neighborhood"                  \
           -command [list ::order enter NBHOOD:CREATE]] \
       order NBHOOD:CREATE
</pre>

Menu items are a special case, because a menu item is an item within a
menu widget, not a widget in its own right.  Thus, menu items are
specified as a list of two items, the menu command and the index of
the item, typically the item's label.  The <iref menuitem> command
is a convenience command that creates a menu item and returns exactly
such a list:

<pre>
    cond::orderIsValid control \
       [menuitem $menu command "Create Neighborhood"    \
           -command [list ::order enter NBHOOD:CREATE]] \
       order NBHOOD:CREATE
</pre>


<section ENVIRONMENT>

Requires Tcl 8.5 or later.

To use this package in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package directory.

<section AUTHOR>

Will Duquette

<section HISTORY>

This package was inherited from Athena.

</manpage>












