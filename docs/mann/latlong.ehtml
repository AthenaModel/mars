<manpage {marsutil(n) latlong(n)} "Latitude/Longitude Operations">

<section SYNOPSIS>

<pre>
package require marsutil <version>
namespace import ::marsutil::*
</pre>

<itemlist>

<section DESCRIPTION>

latlong(n) defines a number of operations on locations expressed as
a latitude/longitude pair in decimal degrees.  Some of these
operations are implemented in C and are available only in the
optional Marsbin extension.</b><p>

<section COMMANDS>

<deflist>

<defitem "latlong area" {latlong area <i>coords</i>}>

Computes the area, in square kilometers, of the polygon defined by
<i>coords</i>, a flat list of at least three pairs of lat/long
coordinates in decimal degrees.  Things to note:<p>

<ul>
  <li> The polygon must be expressed in counter-clockwise order; if
       not, the result will be negated.
  <li> The polygon must be simply connected, with no loops or holes.
  <li> The polygon may not contain the south or north pole.
  <li> The edges are assumed to be segments of great circles.
  <li> Earth is assumed to be a perfect sphere with a diameter of
       12472.0 kilometers.
</ul><p>

<defitem "latlong dist" {latlong dist <i>loc1 loc2</i>}>

Computes the spherical distance in kilometers between the two
locations.<p>

<defitem "latlong dist4" {latlong dist4 <i>lat1 lon1 lat2 lon2</i>}>

Computes the spherical distance in kilometers between location 1 and
location 2.<p>

<defitem "latlong radius" {latlong radius <i>lat lon</i>}>

Computes the spherical distance in kilometers between location
<i>lat</i>,<i>long</i> and
some point previously set using <iref latlong pole>.<p>

This routine allows radius-related rule checks to be written
independent of the location of the pole.<p>

<defitem "latlong pole" {latlong pole ?<i>loc</i>?}>

Sets/retrieves a location, <i>loc</i>, which is used as the pole for
<iref latlong radius> computations.<p>

<defitem "latlong validate" {latlong validate <i>loc</i>}>
Validates location <i>loc</i>, throwing an error if it is not a valid
lat/long pair.  Otherwise, <i>loc</i> is returned unchanged.<p>

<defitem "latlong tomgrs" {latlong tomgrs <i>loc</i> ?<i>precision</i>?}>

<b>Binary Extension only.</b> Converts location <i>loc</i> from
latitude/longitude to an MGRS 
coordinate string, colloquially known as a "UTM string".  The
<i>precision</i> indicates the number of digits to shown for each
of easting and northing; it defaults to 3, for 100 meter resolution,
but may be set from 0 to 5.<p>

Note that the conversion from lat/long to UTM/MGRS depends on the
choice of <iref latlong spheroid>.

<defitem "latlong frommgrs" {latlong frommgrs <i>utm</i>}>

<b>Binary Extension only.</b> Converts an an MGRS coordinate string,
colloquially known as a "UTM string", into a pair of
latitude/longitude coordinates in decimal degrees.<p>

Note that the conversion from lat/long to UTM/MGRS depends on the
choice of <iref latlong spheroid>.<p>

Also, note that due to the limited precision of the MGRS format,
<iref latlong frommgrs> is only an approximate inverse of
<iref latlong tomgrs>.<p>

<defitem "latlong togcc" {latlong togcc <i>loc</i>}>

<b>Binary Extension only.</b> Converts location <i>loc</i> from
latitude/longitude to a set of GCC (Geocentric Coordinate) values.
The elevation value at <i>loc</i> is assumed to be zero.  The three
GCC values returned are in deciman meters.<p>

Note that the conversion from lat/long to GCC depends on the
choice of <iref latlong spheroid>.

<defitem "latlong fromgcc" {latlong fromgcc <i>xyz</i>}>

<b>Binary Extension only.</b> Converts a geocentric (GCC) location
<i>xyz</i> to a geodetic lat/lon location. The three input
GCC values are in deciman meters.  The returned lat/lon values are in
decimal degreees.<p>

Note that the conversion from GCC to lat/lon depends on the
choice of <iref latlong spheroid>.

<defitem "latlong spheroid" {latlong spheroid ?<i>name</i>?}>

<b>Binary Extension only.</b> Sets/returns the name of the spheroid to use in
all coordinate conversions.  Defaults to "WE", otherwise known as "WGS
84".<p> 

The list of supported spheroids is as follows:<p>

<table>
<tr><td><b>WE</b></td> <td>WGS 84</td></tr>
<tr><td><b>A1</b></td> <td>Airy 1830</td></tr>
<tr><td><b>A2</b></td> <td>Modified Airy </td></tr>
<tr><td><b>AN</b></td> <td>Australian National</td></tr>
<tr><td><b>BN</b></td> <td>Bessel 1841 (Namibia) </td></tr>
<tr><td><b>BR</b></td> <td>Bessel 1841 </td></tr>
<tr><td><b>CC</b></td> <td>Clarke 1866 </td></tr>
<tr><td><b>CD</b></td> <td>Clarke 1880</td></tr>
<tr><td><b>E1</b></td> <td>Everest (India 1830) </td></tr>
<tr><td><b>E2</b></td> <td>Everest (Sabah Sarawak)  </td></tr>
<tr><td><b>E3</b></td> <td>Everest (India 1956) </td></tr>
<tr><td><b>E4</b></td> <td>Everest (Malaysia 1969) </td></tr>
<tr><td><b>E5</b></td> <td>Everest (Malay. &amp; Sing)  </td></tr>
<tr><td><b>E6</b></td> <td>Everest (Pakistan)</td></tr>
<tr><td><b>MF</b></td> <td>Modified Fischer 1960 </td></tr>
<tr><td><b>HM</b></td> <td>Helmert 1906</td></tr>
<tr><td><b>HO</b></td> <td>Hough 1960 </td></tr>
<tr><td><b>ID</b></td> <td>Indonesian 1974 </td></tr>
<tr><td><b>IN</b></td> <td>International 1924 </td></tr>
<tr><td><b>KR</b></td> <td>Krassovsky 1940 </td></tr>
<tr><td><b>G8</b></td> <td>GRS 80 </td></tr>
<tr><td><b>SA</b></td> <td>South American 1969 </td></tr>
<tr><td><b>W7</b></td> <td>WGS 72 </td></tr>
</table>

</deflist>

<section ENVIRONMENT>

latlong(n) requires the Marsbin extension for
certain operations; the remainder require only Tcl 8.5 or later.<p>

To use latlong(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the marsutil(n)
library directory.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>







