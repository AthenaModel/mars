<manpage {marsutil(n) logger(n)} "Application Logger">

<section SYNOPSIS>

<pre>
package require marsutil 0.1
namespace import ::marsutil::logger
</pre>

<itemlist>

<section DESCRIPTION>

logger(n) defines an abstract data type that encapsulates application
logging.  Each instance of logger(n) can manage the program's output
to a succession of log files.  A single application will typically use
just one logger, conventionally called "log".<p>

By default, log entries are written to standard output; log entries
can be written to a file instead, by setting the logger's
<code>-logfile</code> option.<p>

The verbosity of the log (e.g., the quantity and detail of the logged)
can be adjusted at run-time; see <xref VERBOSITY>.<p>

The log entry format is designed for easy parsing and processing;
further, it is extensible.  See <xref "ENTRY FORMAT">.<p>

The application can control the log file name explicitly, or it can
specify a log directory and let the logger manage the log file name.<p>

<section "VERBOSITY">

<subsection "Verbosity Levels">

The application can tune the verbosity of its logging at run-time by
setting the desired "verbosity level".  Each log entry has a
verbosity level; the entry is logged if and only if its verbosity is
less than or equal to the desired verbosity level.  The verbosity
levels are as follows:<p>

<table>
<tr>
<th>Level</th>
<th>Used As Desired Verbosity</th>
<th>Used As Entry Verbosity</th>
</tr>

<tr>
<td><b>silent</b></td>
<td>No entries are logged.</td>
<td>N/A</td>
</tr>

<tr>
<td><b>fatal</b></td>
<td>Log <b>fatal</b> entries only.</td>
<td>Entry should say that the application is about to terminate, and
state why.</td>
</tr>

<tr>
<td><b>error</b></td>
<td>Log entries of level <b>error</b> and below.</td>
<td>Entry should record an erroneous but non-fatal condition.</td>
</tr>

<tr>
<td><b>warning</b></td>
<td>Log entries of level <b>warning</b> and below.</td>
<td>Entry should record an anomalous condition.</td>
</tr>

<tr>
<td><b>normal</b></td>
<td>Log entries of level <b>normal</b> and below.</td>
<td>Normal execution logging.</td>
</tr>

<tr>
<td><b>detail</b></td>
<td>Log entries of level <b>detail</b> and below.</td>
<td>Additional debugging trace; low verbosity.</td>
</tr>

<tr>
<td><b>debug</b></td>
<td>Log entries of level <b>debug</b> and below.</td>
<td>Additional debugging trace; high verbosity.  Reserved for
high-volume messages which are enabled only while validating a
particular feature.</td>
</tr>
</table><p>


The logger's desired verbosity is set using its
<code>-verbosity</code> option; it defaults to <b>normal</b>.<p>

Note that whether an entry is actually logged or not also depends
on the verbosity mode of the component which logs it; see
<xref "Component Verbosity Modes">.<p>

<subsection "Component Verbosity Modes">

Each log entry includes the name of the particular application or
library component which logged it.  This component name is actually an
arbitrary string; the set of component names used for logging can reflect
the logical architecture rather the physical architecture of the
software.<p>

The primary importance of the component name (other than as an aide to a
person reading the logged entries) is that verbosity can be adjusted
component by component by setting the component's "verbosity mode":<p>

<table>
<tr>
<th>Mode</th>
<th>Effect On Component's Logging</th>
</tr>

<tr>
<td><b>silent</b></td>
<td>None of the component's entries will be logged.</td>
</tr>

<tr>
<td><b>level</b></td>
<td>The component's entries will be logged in accordance with the
logger's <code>-verbosity</code> setting.</td>
</tr>

<tr>
<td><b>all</b></td>
<td>All of the component's entries will be logged, indepedent of the
logger's <code>-verbosity</code> setting.</td>
</tr>

</table><p>

A component's verbosity mode defaults to <b>level</b>, and can be
set or retrieved using the logger's <iref verbmode> subcommand.<p>

<section "ENTRY FORMAT">

Each log entry is written as a single line of text, formatted as a Tcl
string:<p>

<pre><lb>timestamp<rb> <lb>level<rb> <lb>component<rb> <lb>message<rb> ?<lb>simtime<rb>?</pre>

<deflist vars>
<def {<code><lb>timestamp<rb></code>}>
The wall-clock time when the entry was logged.  The timestamp
has the format "yyyy-mm-ddThh:mm:ss".  TBD: the
timestamp might be extended to subsecond resolution so that log
entries sort unambiguously in time order.<p>

<def {<code><lb>level<rb></code>}>
The verbosity level of the entry.<p>

<def {<code><lb>component<rb></code>}>
The name of the component which logged the entry.<p>

<def {<code><lb>message<rb></code>}>
The message text, flattened to remove newlines.  See
<xref "Message Flattening"> for more details.<p>

<def {<code><lb>simtime<rb></code>}>
The simulation time as a human-readable string.  This is
included only if the <code>-simclock</code> option is set.<p>

</deflist vars>

<subsection "Message Flattening">

Each log entry is written as a single line of text for ease of
processing; however, logged message strings might contain newlines.
The logger handles this by "flattening" the message string:<p>

<ul>
  <li> Any "\" characters in the string are replaced by "\\".
  <li> Any newlines in the string are replaced by "\n".
</ul><p>

A log post-processor (e.g., a log browser) can unflatten the message
by reversing the process:<p>

<ul>
  <li> Replace each "\\" with a "\".
  <li> Replace each "\n" with a newline.
</ul><p>

For convenience, the <iref logger unflatten> command does this
transformation; otherwise, the following Tcl command will work:<p>

<pre>string map [list \\\\ \\ \\n \n] $message</pre>

<section COMMANDS>

<deflist commands>

<defitem logger {logger <i>name ?options?</i>}>

Creates a new logger object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<iref logger> returns the fully-qualified form of the
<i>name</i>.<p>

The <iref logger> may be created with the following options:<p>

<deflist logger options>

<defopt {-logdir <i>name</i>}>

Specifies the name of a directory in which the logger can create log
files.  Ideally, the directory should be dedicated to the
application's own log files.<p>

The logger will open new log files at creation time, and when
<iref newlog> is called.  The log files will have names like this:

<pre><lb>logdir<rb>/log<lb>NNNNN<rb>[_<lb>label<rb>].log</pre>

where <i>logdir</i> is the log directory, <i>NNNNN</i> is a serial
number, and <i>label</i> is a optional label.  When opening a new log
file, the logger will first scan the log directory and pick a
serial number one higher than that of the highest-numbered log file.
The initial log file will have a <i>label</i> of "start"; thereafter,
a label can optionally be supplied to <iref newlog>.<p>

This option must be set at creation time, and cannot be changed
thereafter.<p>

<defopt {-logfile <i>name</i>}>

Specifies the name of a file to which the log entries will be
written.  By default, or if <i>name</i> is the empty string, log
entries will be written to standard output.<p>

If the <code>-logfile</code> is changed to a different file name, the old
file (if any) is closed and the new file is opened.<p>

The log file is closed automatically if the logger is destroyed.<p>

If <code>-logdir</code> is specified, then <code>-logfile</code>
becomes a read-only option: the log file name can be retrieved
but not set.<p>

<defopt {-verbosity <i>level</i>}>

Sets the logger's verbosity level, which defaults to
<b>normal</b>; the allowed values are
<b>silent</b>, 
<b>fatal</b>, 
<b>error</b>, 
<b>warning</b>, 
<b>normal</b>, 
<b>detail</b>, and 
<b>debug</b>.<p>

See <xref VERBOSITY> for more information.<p>

<defopt {-maxentries <i>num</i>}>

Specifies the maximum number of entries allowed in a single
log file.  If the number is exceeded, the logger will automatically
open a new log file.  The default is 5000. Set the option to 0 to
disable this feature.<p>

This option is ignored if <code>-logdir</code> is not set.<p>

<defopt {-maxmsglen <i>num</i>}>

Specifies the maximum number of characters allowed in a log message.
If this number is exceeded the message is truncated and the entry
shown as being too long. The default is 20000.<p>

<defopt {-simclock <i>cmd</i>}>

Specifies the name of a <xref simclock(i)> object.  If set, the
simulation time will be included in every logged message (see
<xref "ENTRY FORMAT">.  The option should be set before
any messages are logged (e.g., when the logger(n) object is
created).<p>

<defopt {-entrycmd <i>cmd</i>}>

Specifies a command to be called whenever an entry is logged.  The
command will be called at global scope with one additional argument,
the entry dictionary.  The command's return value is ignored.<p>

<defopt {-newlogcmd <i>cmd</i>}>

Specifies a command to be called whenever a new log file is opened,
for whatever reason.  The command will be called
at global scope with one additional argument, the new log file name.
The command's return value is ignored.<p>

Note that the command should not write to the log.<p>

<defopt {-overflowcmd <i>cmd</i>}>

<b>Deprecated.</b>  Specifies a command to be called whenever
<code>-maxentries</code> 
is exceeded and a new log file is created.  The command will be called
at global scope with one additional argument, the new log file name.
The command's return value is ignored.<p>

Note that the command should not write to the log.<p>

</deflist logger options>

<defitem "logger levels" {logger levels}>

Returns a list of the valid verbosity levels, from <b>silent</b> to
<b>debug</b>.<p>

<defitem "logger modes" {logger modes}>

Returns a list of the valid component verbosity modes.<p>

<defitem "logger unflatten" {logger unflatten <i>string</i>}>

Unflattens a log entry's message field, restoring any newline
characters.  See <xref "Message Flattening"> for more information.<p>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of the <iref logger> object has the following subcommands:<p>

<deflist instance>

<defitem cget {$logger cget <i>option</i>}>

Returns the value of the specified <i>option</i>.<p>

<defitem configure {$logger configure <i>option value...</i>}>

Sets the value of one or more of the object's options.<p>

<defitem fatal   {$logger fatal <i>component</i> <i>message</i>}>
<defitem error   {$logger error <i>component</i> <i>message</i>}>
<defitem warning {$logger warning <i>component</i> <i>message</i>}>
<defitem normal  {$logger normal <i>component</i> <i>message</i>}>
<defitem detail  {$logger detail <i>component</i> <i>message</i>}>
<defitem debug   {$logger debug <i>component</i> <i>message</i>}>

Logs an entry with the specified verbosity level, <i>component</i> name,
and <i>message</i>.  Note that
<i>message</i> can be an arbitrary string, though it will usually be a
single line of text with no terminating newline.<p>

See <xref VERBOSITY> and <xref "ENTRY FORMAT"> for more information.<p>

<defitem verbmode {$logger verbmode <i>component</i> ?<i>mode</i>?}>

If <i>mode</i> is specified, sets the component's verbosity mode to
<b>silent</b>, <b>level</b>, or <b>all</b>.<p>

Returns the component's verbosity mode, which defaults to <b>level</b>.<p>

See <xref "Component Verbosity Modes"> for more information.<p>

<defitem components {$logger components}>

Returns a list of the names of all components known to the logger
object--that is, all components for which entries have been logged or
for which the component verbosity mode has been set or queried.<p>

<defitem newlog {$logger newlog ?<i>label</i>?}>

Opens an automatically named log file in the specified
<code>-logdir</code>; if present, the <i>label</i> will be included in
the new log file's name.  See <code>-logdir</code>, above, for details.<p>

Returns the new file name.<p>

</deflist instance>

<section ENVIRONMENT>

Requires Tcl 8.5 or later.

To use this package in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package directory.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>






