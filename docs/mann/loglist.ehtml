<manpage {marsgui(n) loglist(n)} "Log List Widget">

<section SYNOPSIS>

<pre>
package require marsgui <version>
namespace import ::marsgui::*
</pre>

<itemlist>

<section DESCRIPTION>

The loglist(n) widget is used to browse the applications and
application log files in a log directory tree.  The directory tree has
this structure:

<i>rootdir</i>/<i>appdir</i>/log<i>NNNNN</i>.log

where <i>rootdir</i> is the root of the tree.  The <i>rootdir</i> may
contain zero or more application subdirectories; each application may
have written zero or more log files.

The loglist(n) widget displays two lists in a vertical column: a
list of application names and a list of log files for the currently
selected application.  Clicking on an application name in the upper
list displays that application's log files in the lower list.
Clicking on a log file causes the <code>-selectcmd</code> to be
called for the selected log file.

loglist(n) also supports searching across an application's log files;
see <iref searchlogs> for more details.

<section COMMANDS>

This module defines the following command:

<deflist commands>

<defitem loglist {loglist <i>pathName ?options...?</i>}>

Creates a new <iref loglist> widget named <i>pathName</i>.

The <iref loglist> widget may be created with the following options: 

<deflist loglist options>

<defopt {-width <i>chars</i>}>

The width of the loglist in character cells.  Defaults to 25.
Read-only after creation.

<defopt {-height <i>chars</i>}>

The approximate height of the loglist in character cells.  The
application list and the log file list will each
be allocated roughly half of the <code>-height</code>.
Defaults to 15.  Read-only after creation.

<defopt {-showtitle <i>boolean</i>}>

When true (the default), a button containing <code>-title</code> will
be included directly above the list.  Pressing the button causes the
list to be updated.   

<defopt {-showapplist <i>boolean</i>}>

When true (the default), the list of applications will be included
directly above the list of logs files. 

<defopt {-rootdir <i>directory</i>}>

The root of the log tree; its subdirectories contain log files for
specific applications.

<defopt {-logpattern <i>glob_pattern</i>}>

The glob pattern used to filter files in the application directories.
Files matching the pattern are assumed to be log files; all other
files are ignored.  Defaults to "*.log".

<defopt {-msgcmd <i>cmd</i>}>

The command used for reporting progress and status; it will usually
write to the window's message line. The message will be appended
to the <i>cmd</i> as a single string argument.  Defaults to "".

<defopt {-selectcmd <i>cmd</i>}>

A command to execute whenever a log file is selected.  Two arguments
will be appended: The file's full pathname followed by a boolean flag
indicating if the file changed or not.  When there is no
currently-selected log file, the filename will be passed the empty
string, "".  Note that a true value for the changed flag might be
set true even if there was no change.  This should be treated as a
hint that the user is requesting an update.

<defopt {-title <i>title</i>}>

Specifies the <i>title</i> which appears on the update button at the top of
the widget.  Pressing the button updates the contents of the widget.
Defaults to "Applications:".

<defopt {-autoload <i>boolean</i>}>

If enabled, specifies that the most recent file should be loaded during
an update.  An update in this context refers to either a manual or
automatic update.  The default is true.

<defopt {-autoupdate <i>boolean</i>}>

If enabled, the loglist(n) updates its contents every
<code>-updateinterval</code>.  Defaults to "off".  Note that this
option can be enabled and disabled at any time.  See
<iref update> for details on what happens during an update.

<defopt {-updateinterval <i>msecs</i>}>

Sets the auto-update interval to some number of milliseconds.
Defaults to 1000 (one second).

<defopt {-defaultappdir <i>appdir</i>}>

Sets the default application name; that application's subdirectory
will be selected automatically when the loglist is first updated.

<defopt {-formattext <i>val</i>}>

A boolean option that indicates whether or not log entries should be
formatted during a call to <iref searchlogs>.  This only makes sense
if -parsecmd and -formatcmd are also defined.  Searching with this
option active will generally be much slower than without it.

<defopt {-parsecmd <i>cmd</i>}>

A parsing command used to parse the contents of a log file into the
proper format.  The <i>parsecmd</i> will be passed a single argument,
the text string to be parsed; this string will represent a block of
zero or more log entries. This option only matters when -formattext is
true.

<defopt {-formatcmd <i>cmd</i>}>

A formatting command to convert a list of parsed log entries into a
list of formatted log entries just as they would be displayed
currently.  It's up to client to define what formatted means.  This
option only matters when -formattext is true. 

<defopt {-filtercmd <i>cmd</i>}>

A filtering command to filter individual entry strings.
The command should take the entry string as the single argument.
The command should return 1 if the entry string passes the filter and
0 otherwise.  This command will be used during calls to
<iref searchlogs> when -formattext is off. 

</deflist loglist options>

</deflist commands>

<section "INSTANCE COMMAND">

<deflist instance>

<defitem configure {$loglist configure <i>option value...</i>}>

Sets the values of the specified <i>options</i>.

<defitem cget {$loglist cget <i>option</i>}>

Returns the value of the specified <i>option</i>.

<defitem update {$loglist update}>

On update, the loglist(n) looks for new log files for the currently
selected application, if any, and automatically selects the most
recent one; the <code>-selectcmd</code> is called in either case.  In
addition, the loglist(n) looks for and displays any new application
directories.

If no log files are found, whether because the current application
directory is empty or because it has ceased to exist, the
<code>-selectcmd</code> will be called with the empty string, "".

<defitem searchlogs {$loglist searchlogs <i>direction</i> <i>target</i> <i>?searchtype?</i>}>

Executes a search for the <i>target</i> string among the current
application's log files.  The kind of search is determined by
the <i>searchtype</i>, which may be <b>exact</b> (the default),
<b>wildcard</b>, or <b>regexp</b>.  Note that searches are done
using grep(1), so fancy regular expressions may not work quite the
same as they do for searches done using Tcl's regexp matcher.

The search takes the current log file as the starting point and
steps through the <b>earlier</b> or <b>later</b> logs as specified
by the <i>direction</i>.

The first log in the specified direction to contain a hit is
automatically selected, and the <code>-selectcmd</code> is called.
If no hits are found in that direction then a message is written
via the <code>-msgcmd</code>.

Returns 1 on success and 0 on failure.

Searching can be a lengthy process; calling <iref stopsearch>
will terminate it prior to completion.

<defitem stopsearch {$loglist stopsearch}>

Stops the active log search, if there is one.

</deflist>

<section ENVIRONMENT>

marsgui(n) requires Tcl 8.5 or later.

To use marsgui(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package
directory.

<section AUTHOR>

Dave Jaffe,
Will Duquette

<section HISTORY>

6/24/2005 DJ -- Original package.
5/31/2006 WHD -- Extensively revised and refactored.

<section "TO BE DONE">

<ul>
  <li> Bug: <iref searchlogs> uses a for loop containing an explicit
       "update".  This should be recast as a sequence of idle tasks;
       using "update" is asking for trouble.

  <li> <iref searchlogs> executes grep(1) to do the search.  This is
       fast, but the regexp syntax probably isn't identical to Tcl's.
       We should figure out whether there's a significant performance
       penalty for doing it entirely in Tcl.
</ul>

</manpage>







