<manpage {marsutil(n) vec(n)} "Vector Operations">

<section SYNOPSIS>

<pre>
package require marsutil <version>
namespace import ::marsutil::*
</pre>

<itemlist>

<section DESCRIPTION>

vec(n) defines a number of operations on Tcl vector.  A Tcl
vector is just a Tcl list, indexed <i>i</i> = 0,..., <i>n-1</i>; this
module doesn't distinguish between row and column vectors, which
should more properly be represented using <xref mat(n)>.

For example, the following code creates a 3-tuple:

<pre>
set vector {1 2 3}
</pre>

Vectors can be entered explicitly, as shown; alternatively, the
<iref vec new> command can create a vector of arbitrary size.
In general, the elements of a vector can be of any type.

The elements of a vector are accessed using the standard Tcl commands
<code>lindex</code> and <code>lset</code>:

<pre>
# Print element i
puts [lindex $vector $i]

# Set element ito 7
lset vector $i 7
</pre>

Note that Tcl lists are represented internally as extensible arrays;
consequently, access to vector elements is reasonably quick.

<section COMMANDS>

<deflist>

<defitem "vec new" {vec new <i>n ?initval?</i>}>

Returns a new vector with <i>n</i> elements.  If
<i>initval</i> is given, all elements will be set to it; otherwise all
elements will contain the empty string.  For example, the following
code creates a vector of six zeroes:

<pre>
set vector [vec new 6 0]
</pre>

<defitem "vec size" {vec size <i>vector</i>}>

Returns the number of elements in the vector.

<defitem "vec equal" {vec equal <i>vec1 vec2</i>}>

Returns 1 if the two vectors have the same size and
corresponding elements are numerically equal, and 0 otherwise.

<defitem "vec add" {vec add <i>vec1 vec2</i>}>

Returns the sum of the two vectors.

<defitem "vec sub" {vec sub <i>vec1 vec2</i>}>

Returns the difference of the two vectors.

<defitem "vec scalarmul" {vec scalarmul <i>vec constant</i>}>

Returns the product of the vector and the scalar constant.

<defitem "vec normalize" {vec normalize <i>vec</i>}>

Given a vector of non-negative numbers not all zero, returns a
vector of numbers between 0 and 1 which sum to 1.0.  The values are
normalized by dividing by sum of the numbers in the vector.

An error is thrown if the sum of the values is less than or
equal to zero.

<defitem "vec format" {vec format <i>vector</i> <i>fmtstring</i>}>

Returns a copy of the <i>vector</i> which each element formatted using
the standard Tcl <tt>format</tt> command and the given format
string.

<defitem "vec numerize" {vec numerize <i>vector quality</i>}>

Given a <i>vector</i> whose elements are symbols of the specified
<i>quality</i> object, returns a vector in which all symbols have been
converted to their numeric equivalents.  Any pre-existing numeric
elements in the <i>vector</i> are retained.

<defitem "vec pprint" {vec pprint <i>vector labels</i>}>

Returns a pretty-printed text string of the elements in the
<i>vector</i>.  <i>labels</i> is a list of <iref vec size>
labels.  The vector elements are included "as is", with no
additional formatting.

For example, the command

<pre>
vec pprint {1 2 3} {A B C}
</pre>

returns the following string:

<pre>
A 1
B 2
C 3
</pre>

<defitem "vec pprintf" {vec pprintf <i>vector labels format</i>}>

This is a variant of <iref vec pprint>; before the <i>vector</i> is
pretty-printed, the elements are formatted using the standard Tcl
command <code>format</code> and the specified <i>format</i> string.
For example, the following code pretty-prints a numeric vector
containing decimal numbers between 0.000 and 100.000:

<pre>
puts [vec pprintf $vector $labels "%7.3f"]
</pre>

<defitem "vec pprintq" {vec pprintq <i>vector labels quality</i>}>

This is a variant of <iref vec pprint>; the <i>vector</i> is
assumed to contain numeric values of a <xref quality(n)> type.  The
<i>quality</i> object is used to format each element as follows:

<pre>
&lt;shortname&gt;=&lt;value&gt;
</pre>

The <i>value</i> is formatted using the <i>quality</i> object's
<xref quality(n) format> subcommand; the <i>shortname</i> is the
short symbolic name corresponding to the <i>value</i>.

</deflist>

<section "SEE ALSO">

<xref mat(n)>.

<section ENVIRONMENT>

vec(n) requires Tcl 8.5 or later.

To use vec(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the marsutil(n)
library directory.

<section AUTHOR>

Will Duquette

<section HISTORY>

Original package.

</manpage>







