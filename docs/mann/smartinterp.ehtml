<<manpage {marsutil(n) smartinterp(n)} "Smart Tcl Interpreter">>

<<section SYNOPSIS>>

<pre>
package require marsutil <<version>>
namespace import ::marsutil::smartinterp
</pre>

<<itemlist>>

<<section DESCRIPTION>>

smartinterp(n) defines an object that wraps and adds intelligence to
standard Tcl <b>interp</b> objects.  An <b>interp</b> is a slave
interpreter, under the control of the application's interpreter; they
are commonly used for parsing data files (such as <<xref parmset(n)>>'s
parameter files) and for implementing command languages safely.<p>

The usual technique for defining such file formats and command
languages is to alias commands into a "safe" <b>interp</b>.  
The primary shortcoming of using Tcl <b>interp</b>s in this way is
the handling of standard error messages, i.e., the messages Tcl
generates when a command has the wrong number of arguments.
In particular,<p>

<ul>
  <li> The error messages reference the command in the master
       interpreter, not its alias in the slave.  As these often are
       very different, much confusion results.<p>

  <li> The argument syntax Tcl generates automatically for procs
       with variable length argument lists is almost never what you
       want a user to see.<p>
</ul>

smartinterp(n) extends the standard <b>interp</b> with a range of
subcommands for defining commands within the interpreter, and in
particular for defining "smart aliases".  When defining a smart alias,
the programmer specifies the valid minimum and maximum number of
arguments, and also the precise argument syntax string to use in
error messages.  The programmer can also implement ensembles of
smart aliases, and ensembles with sub-ensembles, all with complete
generality.<p>

<<subsection "Smart Aliases and Ensembles">>

This section shows how to define a number of typical commands using
smart aliases and ensembles.  The discussion presumes that all of the commands
are aliased to subcommands of an object called "<b>::sim</b>":<p>

A command called <b>shutdown</b> which takes no arguments:<p>

<pre>    $interp smartalias shutdown 0 0 {} [list ::sim ShutDown]</pre>

A command called <b>ratio</b> which takes one optional argument:<p>

<pre>    $interp smartalias ratio 0 1 {?value?} [list ::sim Ratio]</pre>

A command called <b>magic aggroe</b> which takes some variable number
of options and values:<p>

<pre>
    $interp ensemble magic

    $interp smartalias "magic aggroe" 2 - {option value ?option value...?} \
        [list ::sim MagicAggroe]
</pre>

<<subsection "Functions and Expressions">>

Tcl's default error messages for functions with too many or too few
arguments are not very helpful, especially for functions defined as
procedures in the <code>::tcl::mathfunc</code> namespace.  
smartinterp(n)'s normal smart alias error messages aren't appropriate
either.  Consequently, smartinterp(n) modifies the built-in
<<xref tcl:expr(n)>> command to translate ugly error messages into
more useful ones.<p>

The application can define its own math functions as procedures in the
<code>::tcl::mathfunc</code> namespace.  Such functions can be defined
as procedures within the smartinterp(n) itself, i.e., by using
<<iref proc>>, or as aliases to application commands by using
<<iref function>>.<p>

<<section COMMANDS>>

<<deflist commands>>

<<defitem smartinterp {smartinterp <i>name</i> ?<i>options...</i>?}>>

Creates a new smartinterp(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<<iref smartinterp>> returns the fully-qualified form of the
<i>name</i>.<p>

The <<iref smartinterp>> may be created with the following options:<p>

<<deflist options>>

<<defopt {-cli <i>bool</i>}>>

Here, <i>bool</i> is a boolean flag indicating whether or not the interp
is connected to a command line interface (CLI).  If not (the default)
then the error messages produced for invalid commands by the interp
mimic those of Tcl itself, e.g., "wrong # args: should be...".  If
<i>bool</i> is true, though, then the error messages will be worded
and formatted to be easily read by the human operator.<p>

<<defopt {-trusted <i>bool</i>}>>

Here, <i>bool</i> is a boolean flag indicating whether the interp is
trusted or not; it defaults to <b>no</b>.  If the smartinterp(n) is
untrusted, the default case, then the underlying Tcl interpreter is a
"safe" interpreter; otherwise a trusted slave will be created.<p>

This option can only be set at object creation, and cannot be
changed thereafter.<p>

This option switches the sense of the <code>-safe</code> option used
to create a "safe" interp because safety should be the default case
and trust the exception.<p>

<</deflist>>

<</deflist commands>>

<<section "INSTANCE COMMAND">>

Each instance of the <<iref smartinterp>> object has the following
subcommands:<p>

<<deflist instance>>

<<defitem cget {$obj cget <i>option</i>}>>

Returns the value of the specified <i>option</i>.<p>

<<defitem configure {$obj configure <i>option value...</i>}>>

Sets the value of one or more of the object's options.<p>

<<defitem alias {$obj alias <i>srcToken</i>}>>
<<defitem alias {$obj alias <i>srcToken</i> {}}>>
<<defitem alias {$obj alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>>
<<defitem alias {$obj alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>>
<<defitem expose {$obj expose <i>hiddenName</i> ?<i>exposedCmdName</i>?}>>
<<defitem hide {$obj hide <i>exposedCmdName</i> ?<i>hiddenCmdName</i>?}>>
<<defitem hidden {$obj hidden}>>
<<defitem invokehidden {$obj invokehidden ?-global? <i>hiddenName</i> ?<i>arg...</i>?}>>

These subcommands are delegated to the underlying Tcl <b>interp</b>;
see interp(n) for details.<p>

<<defitem cmdinfo {$obj cmdinfo <i>alias</i>}>>

Returns detailed information about the definition of the alias,
including the minimum and maximum number of arguments and the command
prefix to which it maps.  If the alias is an ensemble, information
information about each subcommand is included.  The command is
recursive; if the alias is an ensemble with sub-ensembles, the entire
tree is returned.<p>

<<defitem ensemble {$obj ensemble <i>alias</i>}>>

Defines an ensemble alias, called <i>alias</i>, to which subcommands
will be added with  <<iref smartalias>>.  If the <i>alias</i> contains
multiple tokens, the final token is taken to be a sub-ensemble. In
this case, the leading tokens must have previously been defined as
an <<iref ensemble>>.<p>

See <<xref "Smart Aliases and Ensembles">> for examples.<p>

<<defitem eval {$obj eval <i>script</i>}>>

Evaluates the <i>script</i> in the context of the interpreter, and returns
the result.<p>

<<defitem {expr eval} {$obj expr eval <i>expression</i>}>>

Evaluates the expression within the interp.
This is shorthand for<p>

<pre>$obj eval [list expr <i>expression</i>]</pre>

<<defitem {expr validate} {$obj expr validate <i>expression</i>}>>

Attempts to validate the expression, finding any syntax errors.  
Returns the expression if no errors are found, and throws
an error with errorcode <b>INVALID</b> otherwise.  The algorithm
used is necessarily heuristic, but avoids false positives.<p>

<b>NOTE:</b> This command validates the expression by executing it
in the context of the interpreter's global namespace, and filtering
out irrelevant errors.  Do not include functions or commands that
cause side effects!<p>

<b>NOTE:</b> Variable references will be flagged as errors unless
the variables are defined in the interpreter's global namespace.<p>

<<defitem function {$obj function <i>name min max argsyn prefix</i>}>>

Defines a new math function within the interp, as an alias to the
given client command <i>prefix</i>, where <i>min</i> is the minimum
number of function arguments, <i>max</i> is the maximum number
(or "-" if there is no maximum) and <i>argsyn</i> is the argument
syntax, specified the same way as for a smart alias.<p>

When the function is called in an expression in the interp, the client's 
command <i>prefix</i> will be called with the function arguments 
appended.<p>

<<defitem help {$obj help <i>command</i>}>>

Returns a short "help" message for the named <i>command</i>, which may
be a <<iref smartinterp>>, <<iref ensemble>>, standard Tcl command, or
<<iref proc>>.  The message will
include the command syntax; for ensembles, it will also include the
list of valid subcommands.<p>

If <i>command</i> is not known to the <<iref smartinterp>>, then
it will throw the error 'No help found: \"<i>command</i>\"'.<p>

The "help" message is used as part of the <<iref smartinterp>>-generated
error messages when <code>-cli</code> is enabled.<p>

<<defitem proc {$obj proc <i>name arglist body</i>}>>

Defines a proc within the interp.  This is shorthand for<p>

<pre>$obj eval [list expr <i>expression</i>]</pre>

<<defitem setsig {$obj setsig <i>prefix min max argsyn</i>}>>

Defines the <<iref siginfo>> information for a command defined in
the interpreter that has no other source of signature information.<p>

When defining signatures for an ensemble command, define
the signature for the bare command first (e.g., "string") and then for 
the subcommands (e.g., "string equal").<p>

<<defitem siginfo {$obj siginfo <i>command</i>}>>

Returns signature info for the given command, suitable for doing
"Wrong # args" checks.  The <i>command</i> can be a single command name,
an ensemble with subcommands, or an entire command string with all arguments.
The <<iref siginfo>> method will break the <i>command</i> into words and
identify the actual command or ensemble subcommand and return the signature
info for that prefix.<p>

The information is returned as a dictionary with the following keys:<p>

<ul>
    <li> <b>prefix</b> -- The command prefix extracted from the <i>command</i>
    <li> <b>min</b> -- The minimum number of arguments required by the
         command.
    <li> <b>max</b> -- The maximum number of arguments required, or "-" 
         if there is no specific maximum.
    <li> <b>argsyn</b> -- The argument syntax string.
</ul><p>

For example, the standard <b>set</b> command has <b>prefix</b> "set", 
<b>min</b> "1",
<b>max</b> "2", and <b>argsyn</b> "varName ?newValue?".<p>

If the <<iref siginfo>> command cannot find signature info for the given
command, it returns the empty string.  It will succeed for the following 
kinds of command:<p>

<ul>
    <li> Procs defined in the interpreter.
    <li> Smart aliases and ensembles.
    <li> A selection of standard Tcl commands, e.g., <b>set</b>.
    <li> Any commands defined by the client using <<iref setsig>>.
</ul>

<<defitem smartalias {$obj smartalias <i>alias min max argsyn prefix</i>}>>

Defines an alias called <i>alias</i> which must take at least
<i>min</i> but no more than <i>max</i> arguments.  If <i>max</i> is
"<b>-</b>" then the number of arguments is unlimited.  If the alias
is called with a number of arguments outside the valid range, the
following error will be thrown:<p>

<pre>wrong # args: should be "<i>alias</i> <i>argsyn</i>"</pre>

When the <i>alias</i> is called in the <<iref smartinterp>>, its arguments
will be concatenated with the specified command <i>prefix</i>, and
the result will be called in the parent interpreter.<p>

If <i>alias</i> contains multiple tokens, the final token is taken
to be a subcommand of the ensemble alias named by the leading tokens.  This
ensemble alias must already have been defined using the
<<iref ensemble>> subcommand.<p>

See <<xref "Smart Aliases and Ensembles">> for examples.<p>


<</deflist instance>>

<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.

To use this package in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package directory.

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>




