<<manpage {marsutil(n) ehtml(n)} "Extended HTML Processor">>

<<xrefset textutil::expander(n) textutil::expander(n) \
        "http://tcllib.sourceforge.net/doc/expander.html">>

<<section SYNOPSIS>>

<pre>
package require marsutil <<version>>
namespace import ::marsutil::*
</pre>

<<itemlist>>

<<section DESCRIPTION>>

ehtml(n) defines an "Extended HTML" processor.  Extended HTML is
plain HTML text extended with macros in double angle brackets;
see <<xref ehtml(5)>> for the basic syntax and standard macros.<p>

Instances of ehtml(n) are wrapper around the Tcllib 
<<xref textutil::expander(n)>> module, using a
<<xref smartinterp(n)>> object as the macro interpreter.<p>

<<section MACROS>>

Extended HTML macros are simply Tcl commands whose return value is
substituted into the input text.  The <<xref ehtml(5)>> man page
describes some standard macros; and this module provides tools for
adding additional macros.<p>

Macros are expanded in a <<xref smartinterp(n)>> interpreter.  Any
Tcl command present in the interpreter can be used as a macro.  
In particular, if the interpreter's auto_path is configured properly,
a man page can load local code using the <<xref ehtml(5) swallow>> 
macro.<p>


<<section COMMANDS>>

<<deflist commands>>

<<defitem ehtml {ehtml <i>name</i>}>>

Creates a new ehtml(n) object called <i>$name</i>. The object is
represented as a new Tcl command in the caller's scope;
<<iref ehtml>> returns the fully-qualified form of the
<i>name</i>.<p>

The processor is manipulated via the subcommands of the
<<iref ehtml>> command, which are as follows:<p>

<</deflist commands>>

<<section "INSTANCE COMMAND">>

Each instance of the <<iref ehtml>> object has the following
subcommands:<p>

<<deflist instance>>

<<defitem cget {$obj cget <i>varname</i>}>>
<<defitem cis {$obj cis <i>cname</i>}>>
<<defitem cname {$obj cname}>>
<<defitem cpop {$obj cpop <i>cname</i>}>>
<<defitem cpush {$obj cpush <i>cname</i>}>>
<<defitem cset {$obj cset <i>varname value</i>}>>
<<defitem cvar {$obj cvar <i>varname</i>}>>
<<defitem errmode {$obj errmode}>>
<<defitem lb {$obj lb}>>
<<defitem rb {$obj rb}>>
<<defitem setbrackets {$obj setbrackets}>>
<<defitem where {$obj where}>>

These commands provide access to the <<xref textutil::expander(n)>>;
see that man page for details.<p>

<<defitem alias {$obj alias <i>srcToken</i>}>>
<<defitem alias {$obj alias <i>srcToken</i> {}}>>
<<defitem alias {$obj alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>>
<<defitem alias {$obj alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>>
<<defitem ensemble {$obj ensemble <i>alias</i>}>>
<<defitem proc {$obj proc <i>name arglist body</i>}>>
<<defitem smartalias {$obj smartalias <i>alias min max argsyn prefix</i>}>>

These commands are used to define commands in the macro interpreter, i.e.,
to define new macros.  See <<xref smartinterp(n)>> for details.<p>

<<defitem clear {$obj clear}>>

Re-initializes the macro interpreter.  Any macros defined by the client
will need to be redefined.<p>

<<defitem eval {$obj eval <i>script</i>}>>

Evaluates the script in the context of the macro interpreter.<p>

<<defitem expand {$obj expand <i>text</i>}>>

Expands the <i>text</i> in two passes, and returns the result of the
expansion.   Use <<iref pass>> to write
macros which are pass-sensitive.<p>

<<defitem expandFile {$obj expandFile <i>name</i>}>>

Reads the contents of the text file called <i>name</i>, expands it in
two passes, and returns the expansion.  Use <<iref pass>> to write
macros which are pass-sensitive.<p>

<<defitem manroots {$obj manroots <i>roots</i>}>>

Defines a mapping from man page names to URLs, so that
<<xref ehtml(5)>> text can use <<iref xref>> to link to
HTML man pages.<p>

When <<iref xref>> is used in this way, the <i>id</i> is the name of
the man page in the following form:<p>

<pre>  ?<i>root</i>:?<i>name</i>(<i>section</i>)</pre>

For example, this man page is called "<code>ehtml(n)</code>".  When
Mars is used by a client, that client's man pages might refer to this
one as "<code>ehtml(n)</code>".<p>

The <i>roots</i> argument is a list of root definitions and URL
patterns:

<pre>  <i>rootDefinition</i> <i>pattern</i> ...</pre>

Each <i>rootDefinition</i> has the following form:<p>

<pre>  ?<i>root</i>?:?<i>section</i>?</pre>

If the <i>root</i> is omitted, then the <i>pattern</i> that follows is for
the case when no root is specified in the <<iref xref>>.<p>

If the <i>section</i> is given, then the <i>pattern</i> that follows
is only for man pages in the given section.<p>

The <i>pattern</i> may be an absolute or relative URL, and may contain
the following %-conversions:<p>

<ul>
  <li> <code><strong>%n</strong></code> : The bare man page name, e.g., the
       bare name of this man page is "ehtml".<p>

  <li> <code><strong>%s</strong></code> : The man page section, e.g., "n".<p>
</ul><p>

As an example, Mars uses the following set of roots when building its
own documentation.  The variable <code>TOP_DIR</code> is set by the
Mars Makefiles; it's always the relative path to the toplevel Mars
directory.  (It's often important to use relative paths, so that the
links continue to work no matter where the documentation tree is
installed.)

<pre>
  :       ${TOP_DIR}/docs/man%s/%n.html
  tcl:n   http://www.tcl.tk/man/tcl8.6/TclCmd/%n.htm
  tk:n    http://www.tcl.tk/man/tcl8.6/TkCmd/%n.htm
</pre>

Thus, this man page is referred to "<code>ehtml(n)</code>", which
translates to:

<pre>
  .../mars/docs/mann/ehtml.html
</pre><p>

<<defitem pass {$obj pass}>>

Returns the expansion pass number, 1 or 2.   It's common to build up 
indices during the first pass and generate tables of links in the 
second.<p>

<<defitem textToId {$obj textToId <i>text</i>}>>

Converts a general string to an identifier string.  Leading and trailing
whitespace and internal punctuation are removed, internal whitespace
is converted to "_", and the text is converted to lower case.<p>

<<defitem xrefhook {$obj xrefhook ?<i>hook</i>?}>>

Sets or queries a Tcl command be used to handle unknown
cross-references.  (Cross references are defined using
<<iref xrefset>>.)  The <i>hook</i> should be a Tcl command prefix
which expects two arguments, the <<iref xref>> <i>id</i> and
<i>anchor</i>.  It should return a list containing two values, the
<i>url</i> corresponding to the ID and the default anchor text to use
if caller specified none.  If the <i>hook</i> cannot identify an
<i>url</i> associated with the <i>id</i>, it should return a 
list of two empty strings.<p>

<<defitem xrefset {$obj xrefset <i>id anchor url</i>}>>

Defines a cross-reference <i>id</i>, which can be passed to
<<iref xref>> to create a page link.  The <i>id</i> can be any
string.  The <i>anchor</i> is the default text to display for the
link.  The <i>url</i> is the URL of the linked page.<p>

<<defitem xref {$obj xref <i>id</i> ?<i>anchor</i>?}>>

Creates a link to the cross-referenced page with the specified
<i>id</i>.  If specified, <i>anchor</i> will be the displayed text;
otherwise, the default anchor text associated with the <i>id</i> will
be used.<p>

By default, only ids defined using <<iref xrefset>> can be linked
in this way.  If <<iref manroots>> are defined, then the <i>id</i>
can be the name of an external man page.  Man pages are specified
as follows:<p>

<pre>  ?<i>root</i>:?<i>name</i>(<i>section</i>)</pre>

If a user of <<xref ehtml(n)>> specifies any <<iref manroots>>,
usually one is defined as default, which means that <i>root</i> can be
omitted.  The <i>root</i> is used as a symbolic name for other
collections of man pages, e.g., the Tcl man pages.<p>

The default anchor text for man page references is

<pre>  <i>name</i>(<i>section</i>)</pre>

even when the <i>root</i> is specified.<p>

<</deflist ehtml>>

<<section "SEE ALSO">>

<<xref ehtml(5)>>, <<xref manpage(n)>>, <<xref marsdoc(n)>>,
<<xref marsdoc(5)>>, <<xref textutil::expander(n)>>

<<section ENVIRONMENT>>

ehtml(n) requires Tcl 8.6 or later.

To use ehtml(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the marsutil(n)
library directory.

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package, based on code in the JNEM jnem_man(1) tool,
heavily revised for Mars 3.0.

<</manpage>>


