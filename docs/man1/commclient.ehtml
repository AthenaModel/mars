<<manpage {marsutil(n) commclient(n)} "commserver(n) client">>

<<section SYNOPSIS>>

<pre>
package require util 1.0
namespace import ::marsutil::commclient
</pre>

<<itemlist>>

<<section DESCRIPTION>>

commclient(n) defines a client for connecting to
a <<xref commserver(n)>> object in another application over a TCP/IP
socket.<p>

The client can send commands to the server for processing; it can also
receive update commands from the server.  Update commands are
processed in a safe interpreter; it is the client's responsibility
to alias handlers for each update command into the safe interpreter
using the <<iref alias>> method.<p>

The connection is first established using the <<iref connect>>
command; if the first attempt is unsuccessful, commclient(n) will
retry every <code>-retrymsecs</code> milliseconds until it is
successful or the object is destroyed.  Similarly, once connected
commclient(n) will ping the <<xref commserver(n)>> every
<code>-pingmsecs</code> milliseconds, to verify that it is still there.
Should the <<xref commserver(n)>> goes away, commclient(n) will
begin to try to re-establish the connection as soon as the server's
disappearance is noted.<p>

The <code>-connectcmd</code>, if any, is called when the client
first succeeds in connecting to the server; the
<code>-disconnectcmd</code> is called if the server disconnects,
as soon as the server's disappearance is noted.<p>

<<section COMMANDS>>

<<deflist commands>>

<<defitem commclient {commclient <i>name ?options?</i>}>>

Creates a new commclient(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<<iref commclient>> returns the fully-qualified form of the
<i>name</i>.<p>

The <<iref commclient>> may be created with the following options:<p>

<<deflist commclient options>>

<<defopt {-clientname <i>name</i>}>>

Logical name of the client.  Defaults to ""; it needs to be set only
if the server implements logical-name-based validation.  The set
of valid logical names is then determined by the server.<p>

<<defopt {-connectcmd <i>command</i>}>>

When commclient(n) first succeeds in connecting to a
<<xref commserver(n)>>, and on successful reconnection, commclient(n)
will call the specified <i>command</i> with no additional arguments.<p>

<<defopt {-disconnectcmd <i>command</i>}>>

When commclient(n) loses its connection to the <<xref commserver(n)>>,
it will call the specified <i>command</i> with no additional
arguments.  Note that <i>command</i> is not called on unsuccessful
connection attempts.<p>

<<defopt {-logcomponent <i>name</i>}>>

The component name to pass to the <code>-logger</code> object when
logging messages; defaults to "commclient".<p>

<<defopt {-logger <i>name</i>}>>

The name of the <<xref logger(n)>> object to use to log client
activity.<p>

This option must be set at creation time, and is read-only
thereafter.<p>

<<defopt {-retrymsecs <i>interval</i>}>>

Specifies the connection retry interval in milliseconds; defaults
to 500.  Must be positive.<p>

<<defopt {-pingmsecs <i>interval</i>}>>

Specifies the ping interval in milliseconds; defaults to 5000.  Must be
positive.<p>

<<defopt {-portid <i>portId</i>}>>

The comm(n) port ID of the <<xref commserver(n)>> to which the client
will connect.<p>

This option must be set at creation time, and is read-only
thereafter.<p>

<<defopt {-hostip <i>hostIp</i>}>>

The IP address of the <<xref jnem_sim(1)>> host, or "" for the
local host.<p>

This option must be set at creation time, and is read-only
thereafter.<p>

<</deflist commclient options>>

<</deflist commands>>

<<section "INSTANCE COMMAND">>

Each instance of the <<iref commclient>> object has the following subcommands:<p>

<<deflist instance>>

<<defitem cget {$commclient cget <i>option</i>}>>

Returns the value of the specified <i>option</i>.<p>

<<defitem configure {$commclient configure <i>option value...</i>}>>

Sets the value of one or more of the object's options.<p>

<<defitem connect {$commclient connect}>>

Attempts to connect to the server; this generally needs to be
called only once, as soon as the client is ready to connect.
If the server does not respond, the client
will retry every <code>-retrymsecs</code> milliseconds.  An
error is thrown if the server refuses the connection.<p>

It's an error to call <<iref connect>> if the client is already
connected to the server.<p>

<<defitem send {$commclient send <i>script</i>}>>

Sends the script to the server for execution.  If the server executes
the script normally, <<iref send>> will return the script's result; if
the server catches an error while executing the script, then
<<iref send>> will throw the same error message (the
<code>-errorCode</code> is not preserved).<p>

If <<iref send>> is called when the client is not yet connected to the
server, this error will be thrown: "client is not connected to the
server".<p>

If <<iref send>> tries to send the <i>script</i> and fails because the
server has disconnected, this error will be thrown: "lost connection".<p>

<<defitem id {$commclient id}>>

Returns the client's comm(n) ID.<p>

<<defitem alias {$commclient alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>>

Aliases the target update command into the safe interpreter as
<i>srcCmd</i>.<p>

<</deflist instance>>

<<section "SEE ALSO">>

<<xref commclient(n)>>

<<section ENVIRONMENT>>

Requires Tcl 8.5 or later.

To use this package in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package directory.

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original package.

<</manpage>>




