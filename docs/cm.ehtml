<document "Configuration Management Plan">

<swallow {
    # Macro Definitions

    # <table ...>
    # <treedir path> Description </treedir>
    #    ...
    # </table>

    macro treedir {path} {
        set trans {
            +   &nbsp;&nbsp;&nbsp;&nbsp; 
            (   <i> 
            )   </i>
        }

        set path [string map $trans  $path]
    } {
        |<--
        [tr]<td><b><tt>$path</tt></b></td>
        <td>
    }

    macro /treedir {} {
        |<--
        </td>
        [/tr]
    }
}>

<hrule>

<contents>

<hrule>

<preface changelog "Change Log">

<changelog>
<change 8/20/2014 update will>
Minor tweaks for Mars 3.0.0, as Kite has solidified.<p>
</change>

<change 7/7/2014 update will>
Major updates for Mars 3.0.0:<p>

<ul>
<li> Moved from Subversion/Bugzilla to github.
<li> Binary packages have been moved to a different project.
</ul>
</change>

<change 6/25/2012 Update will>

Minor updates for Mars 2.x.<p>
</change>

<change 10/7/2011 Update will>
<ul>
  <li> Changed the naming convention for experimental branches; they
       are named using the year and month, but not the day of the
       month.
  <li> Updated the procedure for official builds: the Makefiles now
       handle the version number differently.
</ul>
</change>

<change 10/3/2011 Update will>
Added a section on target software platforms.
</change>

<change 9/20/2011 Update will>
<ul>
  <li> Standardized on "https://oak.jpl.nasa.gov/svn" as the
       repository name.  The name "https://oak/svn" is rejected by
       some clients.
  <li> Added a procedure for using <xref mars_commit(1)> to commit
       bug fixes.
  <li> Added information about how Subversion is integrated with Bugzilla,
       for future reference.
  <li> Miscellaneous corrections, e.g., Minerva is now Athena.
</ul>
</change>

<change 10/15/2008 New will> Initial draft. </change>
</changelog>

<hrule>

<section overview "Overview">

Mars 3.x is an infrastructure library for simulation development.  Its
primary client is the Athena project.  Mars uses
<xref GitHub> for version control 
and issue tracking, and <xref kite(1)> for build management and other
development tasks. This document explains how this works in practice.<p>

<section overview.numbering "Mars Version Numbering">

Versions of the Mars software are numbered <i>x.y.z</i>, following
standard Tcl <xref package(n)> version numbering conventions.  
The version number applies to all Mars library packages.  The
head of Mars development is currently version 3.0.0<p>

Tcl indicates unstable versions by adding an alpha or beta suffix
to the version number.  Thus the unstable code that will eventually
become the stable Mars 3.0.1 is designated Mars 3.0.1a0.  This syntax allows
for multiple unstable versions to be made public, e.g., "3.0.1a0", 
"3.0.1a1", and so on.  All of these numbers are logically greater than
the stable "3.0.0" version, and logicall less than the future stable "3.0.1"
version.<p>

The Mars version number is set in the <xref kite(1)> project file.
During normal development, it is set to an "unstable" version number,
e.g., "3.<i>x.y</i>a0".  Client applications in on-going development will 
generally reference this "unstable" version so as to run with the 
unstable "HEAD" of Mars development.<p>

Official builds of Mars usually take place in conjunction with an
official build of a client application.  When this happens, we
drop the "a0" suffix in the Kite project file:<p>

<ul>
<li> Mars is built and tagged with a stable version number: 
     "3.<i>x.y</i>a0" becomes "3.<i>x.y</i>" in <code>project.kite</code> 
     (e.g., "3.0.1a0" becomes "3.0.1").
     This version is made available to clients.
<li> After the build, the version number in <code>project.kite</code>
     is incremented and the "a0" suffix is added again: "3.<i>x.y</i>" 
     becomes "3.<i>x.y+1</i>a0" (e.g., "3.0.1" becomes "3.0.2a0").
<li> The client application then builds against the stable version.
</ul>

See also <xref clients> for the relation between Mars and its client
projects.<p>

<section overview.tree "Project Tree">

The project directory tree is as follows:<p>

<table tab.tree "Project Directory Tree">
<th><td>Path</td> <td>Description</td></th>

<treedir (root)/       > Root of project tree</treedir>
<treedir +project.kite > <xref kite(1)> Project File </treedir>
<treedir +bin/         > Executable loader scripts and ancillary 
                         tools.</treedir>
<treedir +docs/        > Project documentation</treedir>
<treedir ++man1/       > Man page section (1): Executables</treedir>
<treedir ++man5/       > Man page section (5): File Formats</treedir>
<treedir ++mann/       > Man page section (n): Tcl Commands</treedir>
<treedir ++mani/       > Man page section (i): Tcl Interfaces</treedir>
<treedir +lib/         > Tcl Libraries </treedir>
<treedir ++(name)/     > Tcl source code for package
                           <i>name</i></treedir>
<treedir ++app_(name)/ > Tcl source code for mars(1) application
                           mars_<i>name</i></treedir>
<treedir +test/        > Project test suites</treedir>
<treedir ++(name)/     > Test suite for package <i>name</i></treedir>
<treedir +src/         > Compiled source directories</treedir>
<treedir ++(name)/     > Compiled source directory <i>name</i></treedir>
</table>

<b>Notes:</b><p>

<ul>
  <li> All Mars executables are development tools; none are delivered
       with client projects.
  <li> Mars manual pages are written in <xref manpage(5)> format.
  <li> By convention, Tcl man pages are placed in section (n) of the
       Unix manual.
  <li> The structure of Tcl package directories is described in the
       <xref Coding>.
</ul>

<section overview.docs "Development Documentation">

Mars development documentation consists of:<p>

<ul>
  <li> Software manual pages (man pages)
  <li> Memos
  <li> Other documents: this CM Plan, etc.
</ul><p>

Software manual pages are stored in the repository project tree, as
described in <xref overview.tree>, and are written in <xref manpage(5)>
format.<p>

Other documents will be written in HTML or in MS Office formats; however,
MS Office documents must not be saved in the code repository.  They will
be pulled temporarily into the <tt docs> directory for inclusion in the
distribution .zip file.<p>

HTML documents, like this CM plan, will usually use the 
<xref marsdoc(5)> extended HTML format, and will be stored in the
repository in the <code>docs</code> directory.<p>

<section overview.references "References">

<ul>
<li> <xrefset Git "Git" http://git-scm.com>
<li> <xrefset GitHub "GitHub 4 JPL" http://github.jpl.nasa.gov>
<li> <xrefset kite(1) kite(1) https://github.jpl.nasa.gov/will/athena-kite>
<li> <xrefset Coding "Mars Tcl Coding Standard" ./coding.html>
<li> <xrefset package(n) package(n) http://www.tcl.tk/man/tcl8.6/TclCmd/package.htm>
</ul>

<section platform "Target Platforms">

Mars is primarily a pure-TCL cross-platform library, and targets Linux and 
Windows.  It also runs adequately on OS X, with some GUI oddities.<p>

In addition, its Marsbin packages contains compiled optimizations for some
of the <xref marsutil(n)> commands as well as code for geographic coordinate
conversions that the pure-Tcl packages do not support.  These binary commands
are used if available.<p>

<section vc "Version Control">

Mars uses the <xref Git> version control system, hosted at 
<xref GitHub>.<p>

<section vc.repository "The Git Repository">

The Mars repository URL is<p>

<pre>    https://github.jpl.nasa.gov/will/athena-mars</pre>

In the remainder of this document, the string <i>repository</i> will
mean the repository's base URL in the above form.<p>

<section vc.branches "Git Branches and Tags">

This section explains how Mars uses Git branches and tags to
facilitate development of Mars and its clients.  Procedures appear in
<xref proc>.<p>

<section vc.branches.master "Main-Line Development">

Main-line development takes place on the <b>master</b> branch.<p>

<section vc.branches.builds "Build Tags">

At each official build during normal development, we tag the <b>master</b>
branch as "<code>v3.<i>x.y</i></code>" This serves as a snapshot of the
build, and allows it to be recovered at any time.<p>

<section vc.branches.exper "Experimental Branches">

Developers can create branches on which to do experimental coding; the
results can later be merged with the trunk or deleted.  Experimental
branches should be given a descriptive name.  Branches should be deleted
when no longer needed.  Branches may be synced with the
<xref GitHub> server or retained solely on the user's machine, at the 
user's discretion.  Obsolete branches should be cleaned up.<p>

<section vc.branches.bugfix "Bug-fix Branches">

When fixing complicated bugs over a period of time, it is sometimes
useful to do the fix on a separate branch.  This allows multiple
commits without any chance of destabilizing the trunk.  Such branches
should be called "<code>issue<i>nnnn</i></code>", where
<code>nnnn</code> is the issue number in the tracker at
<xref GitHub>.  The completed fix can be merged
back to the trunk just as with an experimental branch.<p>

<section vc.branches.release "Release Branches">

FIXME: I'm not clear yet on how to do release branches well with
<xref Git>/<xref GitHub>.  However, it would appear that if we
need a release branch rooted at, say, Mars 3.3.0, it should be easy
to create after the fact based on the "v3.3.0" tag.<p>

<section vc.commits "Committing Changes">

The <xref GitHub> desktop software makes it very easy to include
detailed commit messages with each commit: both a brief one-line
title and a more detailed description.  Developers should strive to
provide informative commit messages.<p>

<section vc.commits.issues "Committing Changes for an Issue">

To relate a commit to a particular issue in the issue tracker, 
use any of the following forms (which are case-insensitive) somewhere
in the commit message to close the issue automatically, 
where <i>nnn</i> is the issue number.<p>

<ul>
<li> <code>fix #<i>nnn</i></code>
<li> <code>fixes #<i>nnn</i></code>
<li> <code>fixed #<i>nnn</i></code>
<li> <code>close #<i>nnn</i></code>
<li> <code>closes #<i>nnn</i></code>
<li> <code>closed #<i>nnn</i></code>
<li> <code>resolve #<i>nnn</i></code>
<li> <code>resolves #<i>nnn</i></code>
<li> <code>resolved #<i>nnn</i></code>
</ul><p>

When making changes that do not fully resolve the issue, simply
reference the issue number as "#<i>nnn</i>".<p>

<section issue "Issue Tracking">

Both bugs and new requirements will be tracked using the <xref GitHub>
issue tracker.<p>

<section issue.milestones "Versions and Milestones">

<xref GitHub>'s issue tracker relates issues to "milestones"; open
issues can be associated with the future milestones for which they are
scheduled to be closed.<p>

We will create a milestone for each official version of Mars 
(see <xref overview.numbering>).  As issues are completed, the developer
will associate them with the milestone for the next build.

<section issue.reporting "Issue Contents">

Each issue should include:<p>

<ul>
<li> The platform
<li> The version of Mars in which the bug occurred
<li> Enough information to recreate the problem, if possible.
</ul>

<section issue.lifecycle "Life Cycle">

An issue is opened when a problem, bug, defect, or enhancement is noted,
and assigned to the relevant developer.<p>

An issue is assigned to the next milestone (version) when the work is 
complete.<p>

If Mars went through the I&T process as an application, the issues for
a given  milestone would be closed by the tester.  As an infrastructure
library, Mars does not go through I&T on its own, but only as part
of a client application.  Thus, the developer is responsible for 
opening and closing Mars issues.  An issue can be closed by the developer 
either when it is assigned to a milestone, or after the change is tested 
"in-use" in a client application.<p>

<section clients "Client Projects">

Mars is not delivered on its own, but is to be used as an
infrastructure layer by client projects.  This section explains how
client projects are intended to fit Mars into their CM, using Athena as
an example.<p>

<section clients.issues "Bug Reporting">

When a change is made that affects both Mars and a client, two issues
are needed: one on the Mars issue tracker and one on the client's issue
tracker.  The Mars issue provides a record of what's changed in
Mars, and the client issue goes through I&amp;T with the client.<p>

<section clients.main "Main-Line Development">

During main-line development on the client's trunk, the client should
be using the latest Mars code.  Assuming that the client is also a
<xref kite(1)> project, this is accomplished by cloning Mars onto the
client's machine, building it, and installing the Mars packages into the
local teapot as updates warrant.  The client then requires the Mars
packages in its <tt project.kite> as follows:<p>

<pre>
require marsutil <i version> -local
</pre>


<section clients.cmbuilds "Client Official Builds">

When an official build is to be done for the client, the client should
build with a stable version of Mars.  This is done by installing the
stable version of Mars on the client's machine from distribution file, or
by cloning the Mars repository and building the stable version locally.
The client the builds with the proper version of Mars by updating the version numbers in its <tt project.kite> file.<p>

<section proc "Procedures">

This section describes procedures for Mars
development.<p>

<section proc.clone "Cloning the Repository">

By convention, <xref GitHub> repositories are cloned to the
<code>~/github/<i>project</i></code> directory.<p>

<procedure>

<step>
Clone Mars to <code>~/github/athena-mars</code>.
</step/>
<pre>
$ cd ~/github
$ git clone https://github.jpl.nasa.gov/will/athena-mars.git athena-mars
</step>

<step>
Go to work.
</step/>
<pre>
$ cd athena-mars
$ ...
</pre>
</step>

</procedure>

<section proc.checkout "Checking Out A Tag or Branch">

To check out a tag or branch, first
<xref proc.clone "clone the repository">.  Then check out the
tag or branch.<p>

<procedure>

<step>
Check out the tag or branch, e.g., "v3.3.0".
</step/>
<pre>
$ cd ~/github/athena-mars
$ git checkout v3.3.0
</pre>
</step>

<step>
Go to work.
</step/>
<pre>
$ ...
</pre>
</step>

</procedure>

Alternative, use the <xref GitHub> desktop software to switch the
work area to the desired branch or tag.<p>

<section proc.devbuild "Performing a Development Build">

A development build is simply a build performed during the course of
development.   For Mars, it runs all unit tests, builds the documentation, 
produces <code>mars.kit</code>, and packages up the libraries for installation
in the local teapot.<p>

<procedure>

<step>
Go to the work area.
</step/>
<pre>$ cd ~/github/athena-mars</pre>
</step>

<step>
Update dependencies, if necessary
</step/>
<pre>$ kite deps update</pre>
</step>

<step>
Run all tests, if desired.
</step/>
<pre>$ kite test</pre>
</step>

<step>
Build all build products.
</step/>
<pre>$ kite build</pre>
</step>

<step>
Install the build products for local use, if desired.
</step/>
<pre>$ kite install</pre>
</step>
</procedure>


<section proc.cmbuild "Performing Official Builds">

Note that many of the <xref Git>-related steps can also be done
using the <xref GitHub> desktop application or the <xref GitHub>
web interface.<p>

<procedure>

<step>
Make sure all developers have committed all changes needed for the build.
</step/>
n/a
</step>

<step>
Check the <b>master</b> branch out of the repository
into <code>~/github/athena-mars</code>.  Either
<xref proc.clone "clone it"> or <xref proc.checkout "checkout">
the <b>master</b> branch.
</step/>
See the procedures referenced to the left.
</step>

<step>
Determine the version number.  This will almost always be the version
in the <code>project.kite</code> file, less the unstable "a0" suffix.
</step/>
E.g., "3.3.0" if <code>project.kite</code> says "3.3.0a0"
</step>

<step>
Update the version in <code>project.kite</code>.
</step/>
</pre>
$ cd ~/github/athena-mars
$ vim project.kite 
</pre>
</step>

<step>
Update the Build Notes file, <code>docs/build_notes.ehtml</code>, with
the details about the current build.  The update will
usually include the version, the date, a general description of the
changes, and a list of issue included in the build, with titles.
</step/>
<pre>
$ cd ~/github/athena-mars/docs
$ vim build_notes.ehtml
</pre>
</step>


<step>
Build and test the software, resolving any problems found until the
build is clean.
</step/>
<pre>
$ cd ~/github/athena-mars
$ kite clean
# kite buildall
</pre>
</step>

<step>
Commit the changes, using the GitHub desktop application or the 
commands to the right.
</step/>
<pre>
$ cd ~/github/athena-mars
$ git commit -a "Building Mars 3.3.0"
</pre>
</step>

<step>
Tag the <b>master</b> branch with the build number.
This is most easily done using the GitHub web page.
</step/>
On the GitHub athena-mars web page, click on "releases" and make a 
new release.  Tag it as "v3.3.0", title it "Mars v3.3.0", and enter
a brief description.<p>

Or,<p>

</pre>
$ cd ~/github/athena-mars
$ git tag -a -m "Mars v3.3.0" v3.3.0
</pre>
</step>

<step>
If desired, the Mars documentation tree and other build products
can be copied to some central location.
</step/>
TBD: We are setting up a web server for this purpose.
</step>

<step>
If desired, the teapot packages for Mars library packages can be
installed in the local teapot, and the Mars executable can be installed
in ~/bin.
</step/>
<pre>
$ kite install
</pre>
</step>

<step>
Increment the version number in <code>project.kite</code> 
to the next unstable version, e.g., from "3.3.0" to "3.3.1a0".
</step/>
<pre>
$ cd ~/github/athena-mars
$ vim project.kite
$ kite info
$ git commit -a "Incremented version."
</pre>
</step>

<step>
Add the new version as a milestone in <xref GitHub>.
</step/>
At the <xref GitHub> web site, add milestone "v3.3.1".  See
the <xref GitHub> help for instructions.
</step>

</procedure>


<section proc.commit "Committing Bug Fixes">

Using the <xref GitHub> desktop software or the <xref Git> 
command line tools, commit the changes, referencing the issue
number as "#<i>nnn</i>".  If you use one of the phrases from 
"<xref vc.commits.issues>", the issue will be closed automatically.<p>


</document>
