# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    geometry.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for marsutil(n), geometry.tcl
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}

# Import tcltest(n)
namespace import ::tcltest::test
 
#-----------------------------------------------------------------------
# Load the package to be tested

source ../../lib/marsutil/pkgModules.tcl
namespace import ::marsutil::*

#-------------------------------------------------------------------
# point

test point-1.1 {Create a point} -body {
    point 1 2
} -result {1 2}


#-------------------------------------------------------------------
# px

test px-1.1 {Get X coord} -body {
    px {1 2}
} -result {1}

#-------------------------------------------------------------------
# py

test py-1.1 {Get X coord} -body {
    py {1 2}
} -result {2}

#-------------------------------------------------------------------
# avgpoint

test avgpoint-1.1 {One coord} -body {
    avgpoint {1 1}
} -result {1.0 1.0}

test avgpoint-1.2 {Two coords} -body {
    avgpoint {1 1 3 3}
} -result {2.0 2.0}

test avgpoint-1.3 {Three coords} -body {
    avgpoint {1 1 5 5 12 12}
} -result {6.0 6.0}

#-------------------------------------------------------------------
# ccw

test ccw-1.1 {Turn counterclockwise} -body {
    #   c 
    #   |
    # a-b
    set a {0 0}
    set b {1 0}
    set c {1 1}

    ccw $a $b $c
} -result {1}

test ccw-1.2 {Turn clockwise} -body {
    # a-b
    #   |
    #   c 
    set a {0  0}
    set b {1  0}
    set c {1 -1}

    ccw $a $b $c
} -result {-1}

test ccw-1.3 {Collinear, case 1 (a-b-c)} -body {
    # a-b-c
    set a {0 0}
    set b {1 0}
    set c {2 0}

    ccw $a $b $c
} -result {1}

test ccw-1.4 {Collinear, case 2 (c-a-b)} -body {
    # c-a-b
    set a { 0 0}
    set b { 1 0}
    set c {-1 0}

    ccw $a $b $c
} -result {-1}

test ccw-1.5 {Collinear, case 3 (a-c-b)} -body {
    # a-c-b
    set a {0 0}
    set b {2 0}
    set c {1 0}

    ccw $a $b $c
} -result {0}

# The following three cases are specific to the CBS version;
# they handle the case where a==b.  I'm not quite why they 
# produce the outputs they do, but I presume it's important.

test ccw-1.6 {Collinear, case 4 (a == b, [px c] < [px a])} -body {
    set a {0 0}
    set c {-1 0}
    ccw $a $a $c
} -result {-1}

test ccw-1.7 {Collinear, case 5 (a == b, [px c] > [px a])} -body {
    set a {0 0}
    set c {1 0}
    ccw $a $a $c
} -result {1}

test ccw-1.8 {Collinear, case 6 (a == b, [px c] == [px a])} -body {
    set a {0 0}
    set c {0 1}
    ccw $a $a $c
} -result {0}

test ccw-1.9 {Collinear, a == b == c} -body {
    # This is a special case of the the previous test; I include
    # it for completeness' sake.
    set a {0 0}
    ccw $a $a $a
} -result {0}

#-------------------------------------------------------------------
# intersect

test intersect-1.1 {non-intersection} -body {
    set p1 {0 0}
    set p2 {0 1}
    set q1 {1 0}
    set q2 {1 1}
    
    intersect $p1 $p2 $q1 $q2
} -result {0}

test intersect-1.2 {normal intersection} -body {
    set p1 {0 0}
    set p2 {1 1}
    set q1 {0 1}
    set q2 {1 0}
    
    intersect $p1 $p2 $q1 $q2
} -result {1}

test intersect-1.3 {intersection at one endpoint} -body {
    set p1 {0 0}
    set p2 {2 0}
    set q1 {1 0}
    set q2 {1 1}
    
    intersect $p1 $p2 $q1 $q2
} -result {1}

test intersect-1.4 {intersection at one endpoint} -body {
    set p1 {0 0}
    set p2 {1 0}
    set q1 {1 0}
    set q2 {1 1}
    
    intersect $p1 $p2 $q1 $q2
} -result {1}

test intersect-1.5 {one degenerate segment} -body {
    set p1 {1 0}
    set p2 {1 0}
    set q1 {0 0}
    set q2 {2 0}
    
    intersect $p1 $p2 $q1 $q2
} -result {1}

test intersect-1.6 {two degenerate segments} -body {
    set p1 {1 1}
    set p2 {1 1}
    set q1 {1 1}
    set q2 {1 1}
    
    intersect $p1 $p2 $q1 $q2
} -result {1}

#-------------------------------------------------------------------
# bbox

test bbox-1.1 {normal case} -body {
    set poly [list 0.0 0.0  3.0 0.0  3.0 1.0  0.0 1.0]

    bbox $poly
} -result {0.0 0.0 3.0 1.0}

test bbox-1.2 {degenerate case: one point} -body {
    set poly [list 2.0 2.0]

    bbox $poly
} -result {2.0 2.0 2.0 2.0}

#-------------------------------------------------------------------
# boxaround

test boxaround-1.1 {normal case} -body {
    boxaround 5.0 10.0 20.0
} -result {5.0 15.0 15.0 25.0}

#-------------------------------------------------------------------
# cindex

test cindex-1.1 {0th point} -body {
    cindex {1 2 3 4 5 6} 0
} -result {1 2}

test cindex-1.2 {middle point} -body {
    cindex {1 2 3 4 5 6} 1
} -result {3 4}

test cindex-1.3 {end point} -body {
    cindex {1 2 3 4 5 6} 2
} -result {5 6}

test cindex-1.4 {wrap-around end once} -body {
    cindex {1 2 3 4 5 6} 3
} -result {1 2}

test cindex-1.5 {wrap-around end twice} -body {
    cindex {1 2 3 4 5 6} 4
} -result {3 4}

#-------------------------------------------------------------------
# clength

test clength-1.1 {0 points} -body {
    clength {}
} -result {0}

test clength-1.2 {1 point} -body {
    clength {1 2}
} -result {1}

test clength-1.3 {2 points} -body {
    clength {1 2 3 4}
} -result {2}

test clength-1.4 {3 points} -body {
    clength {1 2 3 4 5 6}
} -result {3}

#-------------------------------------------------------------------
# creverse

test creverse-1.1 {0 points} -body {
    creverse {}
} -result {}

test creverse-1.2 {1 points} -body {
    creverse {1 2}
} -result {1 2}

test creverse-1.3 {2 points} -body {
    creverse {1 2 3 4}
} -result {3 4 1 2}

test creverse-1.4 {3 points} -body {
    creverse {1 2 3 4 5 6}
} -result {5 6 3 4 1 2}

#-------------------------------------------------------------------
# cedge

test cedge-1.1 {edge 0} -body {
    cedge {0 0  2 0  2 2  0 2} 0
} -result {0 0 2 0}

test cedge-1.2 {edge 1} -body {
    cedge {0 0  2 0  2 2  0 2} 1
} -result {2 0 2 2}

test cedge-1.3 {edge 2} -body {
    cedge {0 0  2 0  2 2  0 2} 2
} -result {2 2 0 2}

test cedge-1.4 {edge 3} -body {
    cedge {0 0  2 0  2 2  0 2} 3
} -result {0 2 0 0}

test cedge-1.5 {edge -1} -body {
    cedge {0 0  2 0  2 2  0 2} -1
} -result {0 2 0 0}

#-------------------------------------------------------------------
# ptinpoly

test ptinpoly-1.1 {inside} -body {
    # poly is 2x2 square
    set poly {0 0  2 0  2 2  0 2}
    set pt {1 1}

    ptinpoly $poly $pt
} -result {1}

test ptinpoly-1.2 {outside, outside bounding box} -body {
    # poly is diamond centered in 2x2 square
    set poly {1 0  2 1  1 2  0 1}
    set pt {3 3}

    ptinpoly $poly $pt
} -result {0}

test ptinpoly-1.3 {outside, within bounding box} -body {
    # poly is diamond centered in 2x2 square
    set poly {1 0  2 1  1 2  0 1}
    set pt {0.25 0.25}

    ptinpoly $poly $pt
} -result {0}

test ptinpoly-1.4 {inside, center of vertices} -body {
    # poly is diamond centered in 2x2 square
    set poly {1 0  2 1  1 2  0 1}
    set pt {1 1}

    ptinpoly $poly $pt
} -result {1}

test ptinpoly-1.5 {inside, on horizontal edge} -body {
    # poly is 2x2 square
    set poly {0 0  2 0  2 2  0 2}
    set pt {1 0}

    ptinpoly $poly $pt
} -result {1}

test ptinpoly-1.6 {inside, on vertical edge} -body {
    # poly is 2x2 square
    set poly {0 0  2 0  2 2  0 2}
    set pt {2 1}

    ptinpoly $poly $pt
} -result {1}

test ptinpoly-1.7 {on vertex} -body {
    # poly is 2x2 square
    set poly {0 0  2 0  2 2  0 2}

    set count 0
    foreach {x y} $poly {
        incr count [ptinpoly $poly [point $x $y]]
    }

    set count
} -result {4}

test ptinpoly-1.8 {poly is not convex} -body {
    # poly is L-shaped:
    #
    #
    # 2 +--+
    #   |  |
    # 1 |  +--+
    #   |     |
    # 0 +-----+
    #   0  1  2

    set poly {0 0  0 2  1 2  1 1  2 1  2 0}

    # All vertices should be inside
    set counter1 0

    foreach {x y} $poly {
        if {[ptinpoly $poly [point $x $y]]} {
            incr counter1
        }
    }

    # These points should be inside
    set counter2 0
    foreach pt [list {0.5 0.5} {0.5 1.0} {0.5 1.5} {1.0 0.5} {1.5 0.5}] {
        if {[ptinpoly $poly $pt]} {
            incr counter2
        }
    }

    # This point should be outside
    set counter3 [ptinpoly $poly {2 2}]

    list $counter1 $counter2 $counter3
} -result {6 5 0}


test ptinpoly-1.9 {Check edge conditions} -body {
    # Per Bob Chamberlain, this test checks the special cases that
    # naive algorithms get wrong.  Note that the specified polygon
    # has both vertices and edges on the line from 0,0 to 10,0

    set poly {
        1.0  1.0
        4.0  1.0
        5.0  0.0
        6.0  1.0
        8.0  0.0
        9.0  0.0
        7.0 -1.0
        3.0  0.0
        2.0 -1.0
    }

    # Now, pick two specific points on that line, one outside, and
    # one inside:

    set a {0.0 0.0}
    set b {2.5 0.0}

    list [ptinpoly $poly $a] [ptinpoly $poly $b]
} -result {0 1}

test ptinpoly-2.1 {outside bbox, bbox provided} -body {
    # poly is diamond centered in 2x2 square
    set poly {1 0  2 1  1 2  0 1}
    set pt {3 3}

    ptinpoly $poly $pt [bbox $poly]
} -result {0}

test ptinpoly-2.2 {outside, within bbox, bbox provided} -body {
    # poly is diamond centered in 2x2 square
    set poly {1 0  2 1  1 2  0 1}
    set pt {0.25 0.25}

    ptinpoly $poly $pt [bbox $poly]
} -result {0}

test ptinpoly-2.3 {inside, center of vertices, bbox provided} -body {
    # poly is diamond centered in 2x2 square
    set poly {1 0  2 1  1 2  0 1}
    set pt {1 1}

    ptinpoly $poly $pt [bbox $poly]
} -result {1}

# Using Bourke algorithm

test ptinpoly-3.1 {poly is defined clockwise} -body {
    # Note that the GEEP algorithm requires the points to be defined
    # counterclockwise.

    # poly is 2x2 square
    set poly {0 0  0 2  2 2  2 0}
    set pt {1 1}

    ptinpoly $poly $pt
} -result {1}




#-------------------------------------------------------------------
# Cleanup

tcltest::cleanupTests







