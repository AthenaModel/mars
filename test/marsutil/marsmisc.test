# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    marsmisc.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for marsutil(n) marsmisc.tcl
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}

# Import tcltest(n)
namespace import ::tcltest::test
 
#-----------------------------------------------------------------------
# Load the package to be tested

source ../../lib/marsutil/pkgModules.tcl
namespace import ::marsutil::*

#-------------------------------------------------------------------
# commafmt

test commafmt-1.1 {Small integers are left alone} -body {
    commafmt 123
} -result {123}

test commafmt-1.2 {Large integers are formatted with commas} -body {
    commafmt 123456789
} -result {123,456,789}

test commafmt-1.3 {Negative integers are handled properly} -body {
    commafmt -123456789
} -result {-123,456,789}

test commafmt-1.4 {Real numbers are rounded} -body {
    commafmt 12345.6
} -result {12,346}

#-------------------------------------------------------------------
# moneyfmt

test moneyfmt-1.1 {x < 1000} -body {
    list [moneyfmt 0] [moneyfmt 999.99]
} -result {0.00 999.99}

test moneyfmt-1.2 {1000 <= x < 10,000} -body {
    list [moneyfmt 1000] [moneyfmt 9999.99]
} -result {1,000.00 9,999.99}

test moneyfmt-1.3 {10,000 <= x < 1M} -body {
    list [moneyfmt 10000.0] [moneyfmt 999999.0]
} -result {10,000 999,999}

test moneyfmt-1.4 {1M <= x < 1B} -body {
    list [moneyfmt 1e6] [moneyfmt 999.999e6]
} -result {1.000M 999.999M}

test moneyfmt-1.5 {1B <= x < 1T} -body {
    list [moneyfmt 1e9] [moneyfmt 999.999e9]
} -result {1.000B 999.999B}

test moneyfmt-1.6 {1T <= x} -body {
    moneyfmt 1.5e12
} -result {1.500T}

test moneyfmt-1.7 {x < 1000, negative} -body {
    list [moneyfmt 0] [moneyfmt -999.99]
} -result {0.00 -999.99}

test moneyfmt-1.8 {1000 <= x < 10,000, negative} -body {
    list [moneyfmt -1000] [moneyfmt -9999.99]
} -result {-1,000.00 -9,999.99}

test moneyfmt-1.9 {10,000 <= x < 1M, negative} -body {
    list [moneyfmt -10000.0] [moneyfmt -999999.0]
} -result {-10,000 -999,999}

test moneyfmt-1.10 {1M <= x < 1B, negative} -body {
    list [moneyfmt -1e6] [moneyfmt -999.999e6]
} -result {-1.000M -999.999M}

test moneyfmt-1.11 {1B <= x < 1T, negative} -body {
    list [moneyfmt -1e9] [moneyfmt -999.999e9]
} -result {-1.000B -999.999B}

test moneyfmt-1.12 {1T <= x, negative} -body {
    moneyfmt -1.5e12
} -result {-1.500T}

#-------------------------------------------------------------------
# moneyscan

test moneyscan-1.1 {Invalid input} -body {
    moneyscan 1.1Q
} -returnCodes {
    error
} -result {Invalid input: "1.1Q"}

test moneyscan-2.1 {Scan 0.0} -body {
    moneyscan 0.0
} -result {0.0}

test moneyscan-2.2 {Scan 1,234.56} -body {
    moneyscan 1,234.56
} -result {1234.56}

test moneyscan-2.3 {Scan -1,234.56} -body {
    moneyscan -1,234.56
} -result {-1234.56}

test moneyscan-2.4 {Scan 12.345M} -body {
    moneyscan 12.345M
} -result {12345000.0}

test moneyscan-2.5 {Scan -12.345M} -body {
    moneyscan -12.345M
} -result {-12345000.0}

test moneyscan-2.6 {Scan 12.345B} -body {
    moneyscan 12.345B
} -result {12345000000.0}

test moneyscan-2.7 {Scan -12.345B} -body {
    moneyscan -12.345B
} -result {-12345000000.0}

test moneyscan-2.8 {Scan 12.345T} -body {
    moneyscan 12.345T
} -result {12345000000000.0}

test moneyscan-2.9 {Scan -12.345T} -body {
    moneyscan -12.345T
} -result {-12345000000000.0}

test moneyscan-2.10 {Scan 0100} -body {
    moneyscan 0100
} -result {100.0}

test moneyscan-2.11 {Scan 0100K} -body {
    moneyscan 0100K
} -result {100000.0}

test moneyscan-2.12 {Scan 0} -body {
    moneyscan 0
} -result {0.0}

#-------------------------------------------------------------------
# moneysort

test moneysort-1.1 {Invalid a} -body {
    moneysort 1.1Q 2
} -returnCodes {
    error
} -result {Invalid input: "1.1Q"}

test moneysort-1.2 {Invalid b} -body {
    moneysort 1 2.2Q
} -returnCodes {
    error
} -result {Invalid input: "2.2Q"}

test moneysort-2.1 {a < b} -body {
    moneysort 1.1M 2.2M
} -result {-1}

test moneysort-2.2 {a == b} -body {
    moneysort 1M 1.00M
} -result {0}

test moneysort-2.3 {a > b} -body {
    moneysort 2.2M 1.1M
} -result {1}

#-------------------------------------------------------------------
# restrict

# Pseudo-validation type: all we need to verify is that
# the value passed in for validation is canonicalized. 
# For this type, all values are valid, and all canonicalize
# to "THAT".
proc thattype {"validate" value} {
    return "THAT"
}

test restrict-1.1 {empty values get default} -body {
    set value ""
    restrict value snit::boolean no
    set value
} -result {no}

test restrict-1.2 {invalid values get default} -body {
    set value "NONESUCH"
    restrict value snit::boolean yes
    set value
} -result {yes}

test restrict-1.3 {valid values get canonicalized} -body {
    set value "That One"
    restrict value thattype THIS
    set value
} -result {THAT}



#-------------------------------------------------------------------
# let

test let-1.1 {constant expression} -body {
    let x {1 + 1}
} -result {2}

test let-1.2 {variable expression} -body {
    set a 5
    let x {$a}
} -result {5}


#-------------------------------------------------------------------
# roundrange

test roundrange-1.1 {round 0.12 0.89 } -body {
    roundrange 0.12 0.89
} -result {0.0 1.0}

test roundrange-1.2 {round 342 9603} -body {
    roundrange 342 9603
} -result {0.0 10000.0}

test roundrange-1.3 {round 342 343} -body {
    roundrange 342 343 
} -result {342.0 343.0}

test roundrange-1.4 {round 0 100} -body {
    roundrange 0 100
} -result {0.0 100.0}

test roundrange-1.5 {round -100 100} -body {
    roundrange -100 100
} -result {-100.0 100.0}

test roundrange-1.6 {round 0 232.1} -body {
    roundrange 0 232.1
} -result {0.0 300.0}

test roundrange-1.7 {round -0.2 232.1} -body {
    roundrange -0.2 232.1
} -result {-100.0 300.0}

test roundrange-1.8 {round 0.8002 0.8023} -body {
    roundrange 0.8002 0.8023
} -result {0.8 0.803}

#-------------------------------------------------------------------
# gettimeofday

test gettimeofday-1.1 {compare with clock seconds} -body {
    # FIRST, get the time by both methods.
    set t0 [gettimeofday]
    set t1 [clock seconds]

    # NEXT, convert t0 to an integer.
    set t0 [expr {int($t0)}]

    # NEXT, t1 might be 1 second later than t0, since it was
    # called later.
    expr {$t0 == $t1 || $t0 == $t1 - 1}
} -result {1}

#-------------------------------------------------------------------
# percent
test percent-1.1 {shows ~0.0 for small values} -body {

    set vals ""
    foreach frac {
        0.0
        0.001
        0.003
        0.005
        0.0051
        0.009
        0.01
        0.02
        0.1
    } {
        append vals [percent $frac]
    }
    set vals
    
} -result {  0% ~0% ~0% ~0%  1%  1%  1%  2% 10%}

#-------------------------------------------------------------------
# pickfrom
#
# This is difficult to test, as the result is random.

test pickfrom-1.1 {result is always in list} -body {
    set count 0
    set choices {a b c d}

    for {set i 0} {$i < 1000} {incr i} {
        set choice [pickfrom $choices]

        if {[lsearch $choices $choice] != -1} {
            incr count
        }
    }

    set count
} -result {1000}

#-------------------------------------------------------------------
# poisson
#
# This function is difficult to test; we really need a statistical
# analysis.  For now, sample it once and verify that the result
# is an integer.

test poisson-1.1 {non-negative result} -body {
    string is integer -strict [poisson 5]
} -result {1}

#-------------------------------------------------------------------
# discrete
#
# This function is similarly difficult to test.
# For now sample it a number of times and verify that the values
# are within the desired range.

test discrete-1.1 {results in range} -body {
    set samples 10
    set count 0
    for {set i 0} {$i < $samples} {incr i} {
        set n [discrete {0.1 0.2 0.3 0.4}]

        if {$n >= 0 && $n < 4} {
            incr count
        }
    }

    expr {$count == $samples}
} -result {1}

#-------------------------------------------------------------------
# identifier

test identifier-1.1 {identifier validates valid values} -body {
    identifier validate abc_ABC_123 
} -result {abc_ABC_123}

test identifier-1.2 {identifier fails on the empty string} -body {
    identifier validate ""
} -returnCodes {
    error
} -result {invalid value ""}

test identifier-1.3 {identifier fails on a string with whitespace} -body {
    identifier validate "abc 123"
} -returnCodes {
    error
} -result {invalid value "abc 123"}

test identifier-1.4 {identifier fails on a string with punctuation} -body {
    identifier validate "abc.123"
} -returnCodes {
    error
} -result {invalid value "abc.123"}

#-------------------------------------------------------------------
# hexquote

test hexquote-1.1 {all characters are quoted} -body {
    hexquote "X\x0AY\x00Z"
} -result {\x58\x0A\x59\x00\x5A}

test hexquote-1.2 {input can be recreated} -body {
    set a "A\x0A\B\x00\C\[\]\$X"
    set b [subst -nocommands -novariables [hexquote $a]]
    expr {$a eq $b}
} -result {1}
       
#-------------------------------------------------------------------
# optval

test optval-1.1 {optval: option exists} -body {
    set arglist "foo bar -name Fred baz"
    set name [optval arglist -name]
    list $name $arglist
} -result {Fred {foo bar baz}}

test optval-1.2 {optval: option does not exist; no defvalue} -body {
    set arglist "foo bar baz"
    set name [optval arglist -name]
    list $name $arglist
} -result {{} {foo bar baz}}

test optval-1.3 {optval: option does not exist; defvalue} -body {
    set arglist "foo bar baz"
    set name [optval arglist -name Fred]
    list $name $arglist
} -result {Fred {foo bar baz}}

#-------------------------------------------------------------------
# wildToRegexp

test wildToRegexp-1.1 {wildToRegexp: plain text} -body {
    wildToRegexp {asdf1234}
} -result {asdf1234}

test wildToRegexp-1.2 {wildToRegexp: regexp characters} -body {
    wildToRegexp {asdf[^]\+.}
} -result {asdf\[\^\]\\\+\.}

test wildToRegexp-1.3 {wildToRegexp: wildcard characters} -body {
    wildToRegexp {asdf\[\*]1234?}
} -result {asdf\\\[\\.*\]1234.}

#-------------------------------------------------------------------
# hexcolor

test hexcolor-1.1 {non-hex-digit} -body {
    hexcolor validate #ABZ123
} -returnCodes {
    error
} -result {Invalid hex color specifier, should be "#RRGGBB" or "#RRRRGGGGBBBB"}

test hexcolor-1.2 {too long} -body {
    hexcolor validate #ABC1234
} -returnCodes {
    error
} -result {Invalid hex color specifier, should be "#RRGGBB" or "#RRRRGGGGBBBB"}

test hexcolor-1.3 {no hash mark} -body {
    hexcolor validate ABC123
} -returnCodes {
    error
} -result {Invalid hex color specifier, should be "#RRGGBB" or "#RRRRGGGGBBBB"}

test hexcolor-1.4 {color name} -body {
    hexcolor validate black
} -returnCodes {
    error
} -result {Invalid hex color specifier, should be "#RRGGBB" or "#RRRRGGGGBBBB"}

 test hexcolor-2.1 {canonicalizes} -body {
    hexcolor validate #123abc
} -result {#123ABC}




#-------------------------------------------------------------------
# Cleanup

tcltest::cleanupTests






