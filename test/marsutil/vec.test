# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    vec.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for marsutil(n) vec(n)
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}

# Import tcltest(n)
namespace import ::tcltest::test
 
#-----------------------------------------------------------------------
# Load the package to be tested

source ../../lib/marsutil/pkgModules.tcl
namespace import ::marsutil::*

#-------------------------------------------------------------------
# Set up the test environment

# Import tcltest(n)
namespace import ::tcltest::*

# Import the code to be tested
namespace import ::marsutil::*

#-------------------------------------------------------------------
# Creation

test vec_new-1.1 {creating a vector given size, default values} -body {
    vec new 3
} -result {{} {} {}}

test vec_new-1.2 {creating a vector given a size and value} -body {
    vec new 3 0
} -result {0 0 0}

test vec_new-1.3 {invalid number of elements} -body {
    vec new -1
} -returnCodes {
    error
} -result {Assertion failed: $n >= 1}

#-------------------------------------------------------------------
# size

test vec_size-1.1 {nominal case} -body {
    vec size [vec new 3]
} -result {3}

#-------------------------------------------------------------------
# equal

test vec_equal-1.1 {vectors are equal} -body {
    set vec1 {1 2 3 4}
    set vec2 {1 2 3 4}

    vec equal $vec1 $vec2
} -result {1}

test vec_equal-1.2 {elements are not equal} -body {
    set vec1 {1 2 3 4}
    set vec2 {1 2 3 5}

    vec equal $vec1 $vec2
} -result {0}

test vec_equal-1.3 {size differs} -body {
    set vec1 {1 2 3 4 5}
    set vec2 {1 2 3 4}

    vec equal $vec1 $vec2
} -result {0}


#-------------------------------------------------------------------
# pprint

test vec_pprint-1.1 {normal case} -body {
    vec pprint {aaa bbbb} {"R1" "Row 2"}
} -result {R1     aaa
Row 2 bbbb
}

#-------------------------------------------------------------------
# pprintf

test vec_pprintf-1.1 {normal case} -body {
    vec pprintf {4.4444 5.55555} {"R1" "R2"} {%3.1f} 
} -result {R1 4.4
R2 5.6
}

#-------------------------------------------------------------------
# pprintq

test vec_pprintq-1.1 {normal case} -setup {
    quality goodness {
        VG "Very Good" 0.9
        G  "Good"      0.7
        N  "Neutral"   0.5
        B  "Bad"       0.3
        VB "Very Bad"  0.1
    }
} -body {
    set labels {"Row 1" "Row 2"}
    set vec {0.9 0.7}
    vec pprintq $vec $labels [namespace current]::goodness
} -cleanup {
    rename goodness ""
} -result {Row 1 VG= 0.9
Row 2  G= 0.7
}

#-------------------------------------------------------------------
# format

test vec-format.1 {normal case} -body {
    vec format {1 2} %5.3f
} -result {1.000 2.000}

#-------------------------------------------------------------------
# numerize

test vec_numerize-1.1 {normal case} -setup {
    quality goodness {
        VG "Very Good" 0.9
        G  "Good"      0.7
        N  "Neutral"   0.5
        B  "Bad"       0.3
        VB "Very Bad"  0.1
    }
} -body {
    vec numerize {VG G N B} [namespace current]::goodness
} -cleanup {
    rename goodness ""
} -result {0.9 0.7 0.5 0.3}

test vec_numerize-1.2 {numbers are preserved} -setup {
    quality goodness {
        VG "Very Good" 0.9
        G  "Good"      0.7
        N  "Neutral"   0.5
        B  "Bad"       0.3
        VB "Very Bad"  0.1
    }
} -body {
    vec numerize {0.8 0.6 0.4 0.2} [namespace current]::goodness
} -cleanup {
    rename goodness ""
} -result {0.8 0.6 0.4 0.2}

test vec_numerize-1.3 {invalid symbol} -setup {
    quality goodness {
        VG "Very Good" 0.9
        G  "Good"      0.7
        N  "Neutral"   0.5
        B  "Bad"       0.3
        VB "Very Bad"  0.1
    }
} -body {
    vec numerize {NA G N B} [namespace current]::goodness
} -cleanup {
    rename goodness ""
} -returnCodes {
    error
} -result {Unknown name: "NA"}

#-------------------------------------------------------------------
# add

test vec_add-1.1 {nominal case} -body {
    vec add {1 2} {3 4}
} -result {4 6}

test vec_add-1.2 {size mismatch} -body {
    vec add {1 2 3} {4 5}
} -returnCodes {
    error
} -result {Assertion failed: $n1 == $n2}

#-------------------------------------------------------------------
# sub

test vec_sub-1.1 {nominal case} -body {
    vec sub {1 2} {3 4}
} -result {-2 -2}

test vec_sub-1.2 {size mismatch} -body {
    vec sub {1 2 3} {4 5}
} -returnCodes {
    error
} -result {Assertion failed: $n1 == $n2}

#-------------------------------------------------------------------
# vec scalarmul

test vec_scalarmul-1.1 {vec scalarmul: nominal case} -body {
    vec scalarmul {1 2} 2
} -result {2 4}

#-------------------------------------------------------------------
# vec normalize

test vec_normalize-1.1 {normalizes constant vector} -body {
    vec normalize {1 1 1 1}
} -result {0.25 0.25 0.25 0.25}

test vec_normalize-1.2 {normalizes variable vector} -body {
    vec format [vec normalize {1 2 3 4}] %.1f
} -result {0.1 0.2 0.3 0.4}

test vec_normalize-2.1 {rejects zero vector} -body {
    vec normalize {0 0 0 0}
} -returnCodes {
    error
} -result {Cannot normalize, sum <= 0}

test vec_normalize-2.2 {rejects negative vector} -body {
    vec normalize {0 0 0 -1}
} -returnCodes {
    error
} -result {Cannot normalize, sum <= 0}

#-------------------------------------------------------------------
# Cleanup

tcltest::cleanupTests
