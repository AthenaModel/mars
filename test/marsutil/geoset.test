# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    geoset.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for marsutil(n)'s geoset(n) module.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}

# Import tcltest(n)
namespace import ::tcltest::test
 
#-----------------------------------------------------------------------
# Load the package to be tested

source ../../lib/marsutil/pkgModules.tcl
namespace import ::marsutil::*

#-------------------------------------------------------------------
# Set up the test environment

proc setup {} {
    geoset gs
}

proc cleanup {} {
    gs destroy
}

#-------------------------------------------------------------------
# creation

test creation-1.1 {Initial state is empty} -setup {
    setup
} -body {
    gs list
} -cleanup {
    cleanup
} -result {}

#-------------------------------------------------------------------
# create point
#
# This section verifies that the created point really has the 
# attributes with which it was created, as well as the error
# conditions.

test create_point-1.1 {Points can be created.} -setup {
    setup
} -body {
    gs create point P1 {1.0 1.0}

    list [gs exists P1] [gs coords P1] [gs itemtype P1] [gs tags P1]
} -cleanup {
    cleanup
} -result {1 {1.0 1.0} point point}

test create_point-1.2 {Points can be tagged.} -setup {
    setup
} -body {
    gs create point P1 {1.0 1.0} {A B}

    gs tags P1
} -cleanup {
    cleanup
} -result {point A B}

test create_point-2.1 {ID isn't identifier.} -setup {
    setup
} -body {
    gs create point "My Point" {1.0 1.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid value "My Point"}

test create_point-2.2 {ID isn't unique.} -setup {
    setup
} -body {
    gs create point P1 {1.0 1.0}
    gs create point P1 {2.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {item already exists with id: "P1"}

test create_point-2.3 {wrong number of coordinates.} -setup {
    setup
} -body {
    gs create point P1 {1.0 2.0 3.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid point: "1.0 2.0 3.0"}

test create_point-2.4 {non-numeric coordinates.} -setup {
    setup
} -body {
    gs create point P1 {1.0 A}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid coordinate value: "A"}

#-------------------------------------------------------------------
# create line
#
# This section verifies that the created line really has the 
# attributes with which it was created, as well as the error
# conditions.

test create_line-1.1 {Lines can be created.} -setup {
    setup
} -body {
    gs create line L1 {1.0 1.0 2.0 2.0}

    list [gs exists L1] [gs coords L1] [gs itemtype L1] [gs tags L1]
} -cleanup {
    cleanup
} -result {1 {1.0 1.0 2.0 2.0} line line}

test create_line-1.2 {Lines can be tagged.} -setup {
    setup
} -body {
    gs create line L1 {1.0 1.0 2.0 2.0} {A B}

    gs tags L1
} -cleanup {
    cleanup
} -result {line A B}

test create_line-2.1 {ID isn't identifier.} -setup {
    setup
} -body {
    gs create line "My Line" {1.0 1.0 2.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid value "My Line"}

test create_line-2.2 {ID isn't unique.} -setup {
    setup
} -body {
    gs create line L1 {1.0 1.0 2.0 2.0}
    gs create line L1 {2.0 2.0 3.0 3.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {item already exists with id: "L1"}

test create_line-2.3 {odd number of coordinates.} -setup {
    setup
} -body {
    gs create line L1 {1.0 2.0 3.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {expected even number of coordinates, got: "1.0 2.0 3.0"}

test create_line-2.4 {too few points.} -setup {
    setup
} -body {
    gs create line L1 {1.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {expected at least 2 points, got: "1.0 2.0"}

test create_line-2.5 {non-numeric coordinates.} -setup {
    setup
} -body {
    gs create line L1 {1.0 A 3.0 4.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid coordinate value: "A"}

#-------------------------------------------------------------------
# create polygon
#
# This section verifies that the created polygon really has the 
# attributes with which it was created, as well as the error
# conditions.

test create_polygon-1.1 {Polygons can be created.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 1.0 2.0 2.0 1.0 2.0}

    list [gs exists P1] [gs coords P1] [gs itemtype P1] [gs tags P1]
} -cleanup {
    cleanup
} -result {1 {1.0 1.0 2.0 2.0 1.0 2.0} polygon polygon}

test create_polygon-1.2 {Polygons can be tagged.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 1.0 2.0 2.0 1.0 2.0} {A B}

    gs tags P1
} -cleanup {
    cleanup
} -result {polygon A B}

test create_polygon-2.1 {ID isn't identifier.} -setup {
    setup
} -body {
    gs create polygon "My Polygon" {1.0 1.0 2.0 2.0 1.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid value "My Polygon"}

test create_polygon-2.2 {ID isn't unique.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 1.0 2.0 2.0 1.0 2.0}
    gs create polygon P1 {2.0 2.0 3.0 3.0 1.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {item already exists with id: "P1"}

test create_polygon-2.3 {odd number of coordinates.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 2.0 3.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {expected even number of coordinates, got: "1.0 2.0 3.0"}

test create_polygon-2.4 {too few points.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 1.0 2.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {expected at least 3 points, got: "1.0 1.0 2.0 2.0"}

test create_polygon-2.5 {non-numeric coordinates.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 A 2.0 2.0 1.0 2.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid coordinate value: "A"}

#-------------------------------------------------------------------
# delete

test delete-1.1 {delete existing element} -setup {
    setup
} -body {
    gs create point P1 {1.0 1.0}
    gs create line L1 {1.0 2.0 2.0 1.0} border
    gs create polygon N1 {1.0 1.0 2.0 2.0 1.0 2.0}

    set a [gs tags L1]

    gs delete L1

    list $a [gs list] [gs list line] [gs list border] [gs exists L1]
} -cleanup {
    cleanup
} -result {{line border} {P1 N1} {} {} 0}



#-------------------------------------------------------------------
# clear

test clear-1.1 {clear existing elements} -setup {
    setup
} -body {
    gs create point P1 {1.0 1.0}
    gs create line L1 {1.0 2.0 2.0 1.0}
    gs create polygon N1 {1.0 1.0 2.0 2.0 1.0 2.0}

    gs clear

    gs list
} -cleanup {
    cleanup
} -result {}

#-------------------------------------------------------------------
# bbox

test bbox-1.1 {bounding box of point.} -setup {
    setup
} -body {
    gs create point P1 {1.0 1.0}
    gs bbox P1
} -cleanup {
    cleanup
} -result {1.0 1.0 1.0 1.0}

test bbox-1.2 {bounding box of line.} -setup {
    setup
} -body {
    gs create line L1 {1.0 2.0 2.0 1.0}
    gs bbox L1
} -cleanup {
    cleanup
} -result {1.0 1.0 2.0 2.0}

test bbox-1.3 {bounding box of polygon.} -setup {
    setup
} -body {
    gs create polygon P1 {1.0 2.0 2.0 1.0 3.0 3.0}
    gs bbox P1
} -cleanup {
    cleanup
} -result {1.0 1.0 3.0 3.0}

test bbox-2.1 {bounding box of all items.} -setup {
    setup
} -body {
    gs create point P1 {1.0 2.0}
    gs create point P2 {2.0 1.0}
    gs bbox
} -cleanup {
    cleanup
} -result {1.0 1.0 2.0 2.0}

test bbox-2.2 {bounding box of tagged items.} -setup {
    setup
} -body {
    gs create point P1 {1.0 2.0} testtag
    gs create point P2 {2.0 1.0} testtag
    gs create point P3 {3.0 3.0}
    gs bbox testtag
} -cleanup {
    cleanup
} -result {1.0 1.0 2.0 2.0}

test bbox-3.1 {invalid tag or ID.} -setup {
    setup
} -body {
    gs bbox NONESUCH
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown tag or ID: "NONESUCH"}

#-------------------------------------------------------------------
# coords
#
# We've already tested that coords can return an item's coordinates.
# Here, just test error cases.

test coords-1.1 {invalid ID.} -setup {
    setup
} -body {
    gs coords NONESUCH
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown ID: "NONESUCH"}

#-------------------------------------------------------------------
# itemtype
#
# We've already tested that itemtype can return an item's type.
# Here, just test error cases.

test itemtype-1.1 {invalid ID.} -setup {
    setup
} -body {
    gs itemtype NONESUCH
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown ID: "NONESUCH"}

#-------------------------------------------------------------------
# tags
#
# We've already tested that tags can return an item's tags.
# Here, just test error cases.

test tags-1.1 {invalid ID.} -setup {
    setup
} -body {
    gs tags NONESUCH
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown ID: "NONESUCH"}

#-------------------------------------------------------------------
# tag

test tag-1.1 {add a tag.} -setup {
    setup
} -body {
    gs create point P1 {1.0 2.0}
    gs tag P1 NEWTAG
    gs tags P1
} -cleanup {
    cleanup
} -result {point NEWTAG}

test tag-2.1 {invalid ID.} -setup {
    setup
} -body {
    gs tag P1 NEWTAG
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown ID: "P1"}

#-------------------------------------------------------------------
# exists

test exists-1.1 {nominal cases.} -setup {
    setup
} -body {
    gs create point P1 {1.0 2.0}
    list [gs exists P1] [gs exists P2]
} -cleanup {
    cleanup
} -result {1 0}

#-------------------------------------------------------------------
# list

test list-1.1 {list all items.} -setup {
    setup
} -body {
    gs create point   A {1.0 2.0}
    gs create line    B {1.0 2.0 3.0 4.0}
    gs create polygon C {0.0 0.0 1.0 0.0 1.0 1.0}
    gs list
} -cleanup {
    cleanup
} -result {A B C}

test list-1.2 {list all points.} -setup {
    setup
} -body {
    gs create point   A {1.0 2.0}
    gs create point   B {1.0 2.0}
    gs create polygon C {0.0 0.0 1.0 0.0 1.0 1.0}
    gs list point
} -cleanup {
    cleanup
} -result {A B}

test list-1.3 {list all lines.} -setup {
    setup
} -body {
    gs create line   A {1.0 2.0 3.0 4.0}
    gs create line   B {1.0 2.0 2.0 1.0}
    gs create polygon C {0.0 0.0 1.0 0.0 1.0 1.0}
    gs list line
} -cleanup {
    cleanup
} -result {A B}

test list-1.4 {list all polygons.} -setup {
    setup
} -body {
    gs create line   A {1.0 2.0 3.0 4.0}
    gs create polygon B {1.0 2.0 2.0 1.0 3.0 3.0}
    gs create polygon C {0.0 0.0 1.0 0.0 1.0 1.0}
    gs list polygon
} -cleanup {
    cleanup
} -result {B C}

test list-1.5 {list tagged items.} -setup {
    setup
} -body {
    gs create point   A {1.0 2.0} TAG
    gs create line    B {1.0 2.0 3.0 4.0} TAG
    gs create polygon C {0.0 0.0 1.0 0.0 1.0 1.0} TAG
    gs list TAG
} -cleanup {
    cleanup
} -result {A B C}

test list-1.6 {list unknown tag.} -setup {
    setup
} -body {
    gs list TAG
} -cleanup {
    cleanup
} -result {}

test list-1.7 {list all when empty.} -setup {
    setup
} -body {
    gs list
} -cleanup {
    cleanup
} -result {}

#-------------------------------------------------------------------
# find
#
# Note: only works on polygons at this point, so that's all we will
# test.

test find-1.1 {point is outside all polygons.} -setup {
    setup
} -body {
    gs create polygon N1 {0.0 0.0   10.0 0.0  10.0 10.0   0.0 10.0}
    gs find {11.0 11.0}
} -cleanup {
    cleanup
} -result {}

test find-1.2 {point is inside a polygon.} -setup {
    setup
} -body {
    gs create polygon N1 {0.0 0.0   10.0 0.0  10.0 10.0   0.0 10.0}
    gs find {5.0 5.0}
} -cleanup {
    cleanup
} -result {N1}

test find-1.3 {point is inside a stacked polygon.} -setup {
    setup
} -body {
    gs create polygon N1 {0.0 0.0   10.0 0.0  10.0 10.0   0.0 10.0}
    gs create polygon N2 {2.5 2.5    7.5 2.5   7.5  7.5   2.5  7.5}
    gs find {5.0 5.0}
} -cleanup {
    cleanup
} -result {N2}

test find-1.4 {point is outside a stacked polygon.} -setup {
    setup
} -body {
    gs create polygon N1 {0.0 0.0   10.0 0.0  10.0 10.0   0.0 10.0}
    gs create polygon N2 {2.5 2.5    7.5 2.5   7.5  7.5   2.5  7.5}
    gs find {1.0 1.0}
} -cleanup {
    cleanup
} -result {N1}

test find-1.5 {find among tagged polygons.} -setup {
    setup
} -body {
    gs create polygon N1 {0.0 0.0   10.0 0.0  10.0 10.0   0.0 10.0} A
    gs create polygon N2 {2.5 2.5    7.5 2.5   7.5  7.5   2.5  7.5} B
    list [gs find {5.0 5.0} A] [gs find {5.0 5.0} B]
} -cleanup {
    cleanup
} -result {N1 N2}

test find-1.6 {find with unknown tag.} -setup {
    setup
} -body {
    gs create polygon N1 {0.0 0.0   10.0 0.0  10.0 10.0   0.0 10.0}
    gs create polygon N2 {2.5 2.5    7.5 2.5   7.5  7.5   2.5  7.5}
    gs find {5.0 5.0} NONESUCH
} -cleanup {
    cleanup
} -result {}

test find-2.1 {find with invalid point.} -setup {
    setup
} -body {
    gs find {5.0 5.0 1.0}
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {invalid point: "5.0 5.0 1.0"}

#-------------------------------------------------------------------
# Cleanup

tcltest::cleanupTests

